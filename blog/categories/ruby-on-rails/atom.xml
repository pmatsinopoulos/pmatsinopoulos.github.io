<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | Panayotis Matsinopoulos]]></title>
  <link href="http://pmatsinopoulos.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://pmatsinopoulos.github.io/"/>
  <updated>2016-01-22T15:32:33+02:00</updated>
  <id>http://pmatsinopoulos.github.io/</id>
  <author>
    <name><![CDATA[Panayotis Matsinopoulos]]></name>
    <email><![CDATA[panayotis@matsinopoulos.gr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails params Does the Job]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2015/08/08/rails-params-does-the-job/"/>
    <updated>2015-08-08T10:07:00+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2015/08/08/rails-params-does-the-job</id>
    <content type="html"><![CDATA[<p>When you have a Ruby on Rails end point, the client usually sends data in one of the following:</p>

<ol>
<li>For <code>GET</code> requests, URL encoded in the URI</li>
<li>For <code>POST</code> requests, in the body of the request encoded with <code>application/x-www-form-urlencoded</code> or <code>application/json</code> or other popular format.</li>
</ol>


<p>Sometimes, there is a combination of the above methods. In other words, in a <code>POST</code> request, some of the data may come both URL encoded in the URI and other data may come encoded with
another method in the body of the request.</p>

<!-- more -->


<h2>How do we get the data inside our Rails controller?</h2>

<p>Rails does a very good job and allows us to have access to the data sent by the client in a very easy way. This is called <code>params</code> hash.
The <code>params</code> hash holds the data in a <code>Hash</code> version no matter how the data have been sent by the client. You will find in the <code>params</code> hash
data that have been sent URL encoded on the URI of the request, or <code>application/x-www-form-urlencoded</code> in the body of the request or with
any other method.</p>

<h2>Echo Data Service</h2>

<p>I have very quickly created an echo data service and I have deployed that here:</p>

<p><a href="https://echo-data.herokuapp.com/">https://echo-data.herokuapp.com/</a></p>

<p>The source code of that is here:</p>

<p><a href="https://github.com/pmatsinopoulos/echo">https://github.com/pmatsinopoulos/echo</a></p>

<p>What does it do? It returns back to client the data that the client sends to server. The response is a JSON object with two properties. The <code>params</code> value and the <code>request.body</code> value.
The <code>params</code> value will show to you how the controller has interpreted the data sent by the client. The <code>request.body</code> will show you how the body has been actually received.</p>

<h2>Testing the service</h2>

<p>You can use some <code>curl</code> commands to test the echo data service. Here is how:</p>

<h3>Send data URL encoded as part of the URI</h3>

<p>This example sends the data URL encoded as part of the URI.</p>

<p><code>
curl "https://echo-data.herokuapp.com/echo?foo=bar" -v --header "Accept: application/json"
</code></p>

<p>As you see in the output of the <code>curl</code> that is given below, this is a <code>GET</code> request and the <code>Content-Type</code> header is not
specified, because the data are part of the URI.</p>

<pre><code>* Hostname was NOT found in DNS cache
*   Trying 54.243.224.121...
* Connected to echo-data.herokuapp.com (54.243.224.121) port 443 (#0)
&gt; GET /echo?foo=bar HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: echo-data.herokuapp.com
&gt; Accept: application/json
&gt; 
&lt; HTTP/1.1 200 OK 
&lt; Connection: keep-alive
&lt; X-Frame-Options: SAMEORIGIN
&lt; X-Xss-Protection: 1; mode=block
&lt; X-Content-Type-Options: nosniff
&lt; Content-Type: application/json; charset=utf-8
&lt; Etag: W/"d83be65a785d7935d5b38bfcb091f75f"
&lt; Cache-Control: max-age=0, private, must-revalidate
&lt; X-Request-Id: 6e888864-0e1a-4f34-8f24-8c2d57f962f3
&lt; X-Runtime: 0.006788
* Server WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13) is not blacklisted
&lt; Server: WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13)
&lt; Date: Sat, 08 Aug 2015 09:11:42 GMT
&lt; Content-Length: 82
&lt; Via: 1.1 vegur
&lt; 
* Connection #0 to host echo-data.herokuapp.com left intact
{"params":{"foo":"bar","controller":"echo","action":"echo"},"request":{"body":""}}
</code></pre>

<p>The last line above is the actual response payload returned from the echo data service. As you can see,
the <code>params</code> hash contains the key <code>foo</code> with value <code>bar</code>. Note that <code>request.body</code> is empty, because we
didn&rsquo;t send anything there.</p>

<h3>Send data URL encoded in the request body</h3>

<p>With this example we will send the data using a <code>POST</code> request and the data will be
url encoded in the request body.</p>

<p><code>
curl "https://echo-data.herokuapp.com/echo" -v --data foo=bar --header "Accept: application/json"
</code></p>

<p>As you can see from the <code>curl</code> output below, the request is a <code>POST</code> request and the <code>Content-Type</code>
is automatically set to <code>application/x-www-form-urlencoded</code>.</p>

<pre><code>* Hostname was NOT found in DNS cache
*   Trying 23.21.247.21...
* Connected to echo-data.herokuapp.com (23.21.247.21) port 443 (#0)
&gt; POST /echo HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: echo-data.herokuapp.com
&gt; Accept: application/json
&gt; Content-Length: 7
&gt; Content-Type: application/x-www-form-urlencoded
&gt; 
* upload completely sent off: 7 out of 7 bytes
&lt; HTTP/1.1 200 OK 
&lt; Connection: keep-alive
&lt; X-Frame-Options: SAMEORIGIN
&lt; X-Xss-Protection: 1; mode=block
&lt; X-Content-Type-Options: nosniff
&lt; Content-Type: application/json; charset=utf-8
&lt; Etag: W/"92bb929068a54703e29e59154e7c228f"
&lt; Cache-Control: max-age=0, private, must-revalidate
&lt; X-Request-Id: f0262992-5542-4dc3-a2d6-ab52555d3fbe
&lt; X-Runtime: 0.004037
* Server WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13) is not blacklisted
&lt; Server: WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13)
&lt; Date: Sat, 08 Aug 2015 09:12:58 GMT
&lt; Content-Length: 89
&lt; Set-Cookie: request_method=POST; path=/
&lt; Via: 1.1 vegur
&lt; 
* Connection #0 to host echo-data.herokuapp.com left intact
{"params":{"foo":"bar","controller":"echo","action":"echo"},"request":{"body":"foo=bar"}}
</code></pre>

<p>The last line above, is the actual payload response content. It demonstrates that the <code>params</code> hash
has successfully identified the data sent and that you can use it to retrieve it for further processing
in your controller. See how the <code>request.body</code> now is not empty, since <code>curl</code> sent the data in the
body of the request.</p>

<h3>Send data as a JSON string inside the request body</h3>

<p>In the following example we are sending the data as a JSON string in the body of the request:</p>

<p> <code>
 curl "https://echo-data.herokuapp.com/echo" -v --header "Accept: application/json" --header "Content-Type: application/json" -d "{\"foo\":\"data\"}"
</code></p>

<p> What <code>curl</code> returns back is:</p>

<pre><code>* Hostname was NOT found in DNS cache
*   Trying 54.225.207.60...
* Connected to echo-data.herokuapp.com (54.225.207.60) port 443 (#0)
&gt; POST /echo HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: echo-data.herokuapp.com
&gt; Accept: application/json
&gt; Content-Type: application/json
&gt; Content-Length: 14
&gt; 
* upload completely sent off: 14 out of 14 bytes
&lt; HTTP/1.1 200 OK 
&lt; Connection: keep-alive
&lt; X-Frame-Options: SAMEORIGIN
&lt; X-Xss-Protection: 1; mode=block
&lt; X-Content-Type-Options: nosniff
&lt; Content-Type: application/json; charset=utf-8
&lt; Etag: W/"27ba5f1877a65ff394f1899ac75f3449"
&lt; Cache-Control: max-age=0, private, must-revalidate
&lt; X-Request-Id: ecdd54eb-7d99-45b2-9872-cca20a63394c
&lt; X-Runtime: 0.007516
* Server WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13) is not blacklisted
&lt; Server: WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13)
&lt; Date: Sat, 08 Aug 2015 09:17:32 GMT
&lt; Content-Length: 123
&lt; Set-Cookie: request_method=POST; path=/
&lt; Via: 1.1 vegur
&lt; 
* Connection #0 to host echo-data.herokuapp.com left intact
{"params":{"foo":"data","controller":"echo","action":"echo","echo":{"foo":"data"}},"request":{"body":"{\"foo\":\"data\"}"}} 
</code></pre>

<p>As you can see from the <code>curl</code> output, the request is a <code>POST</code> request. The last line shows that, even in that case,
the <code>params</code> hash holds the data in a way that we can handle it from our controller code. See also how the <code>request.body</code>
bears the JSON string sent over.</p>

<h3>Combine data on URI and data in request body</h3>

<p>In the following example, we combine the data on URI and data in request body:</p>

<p><code>
curl "https://echo-data.herokuapp.com/echo?hello=world" -v --header "Accept: application/json" --header "Content-Type: application/json" -d "{\"foo\":\"data\"}"
</code></p>

<p>The <code>curl</code> output in that case is:</p>

<pre><code>* Hostname was NOT found in DNS cache
*   Trying 54.243.163.2...
* Connected to echo-data.herokuapp.com (54.243.163.2) port 443 (#0)    
&gt; POST /echo?hello=world HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: echo-data.herokuapp.com
&gt; Accept: application/json
&gt; Content-Type: application/json
&gt; Content-Length: 14
&gt; 
* upload completely sent off: 14 out of 14 bytes
&lt; HTTP/1.1 200 OK 
&lt; Connection: keep-alive
&lt; X-Frame-Options: SAMEORIGIN
&lt; X-Xss-Protection: 1; mode=block
&lt; X-Content-Type-Options: nosniff
&lt; Content-Type: application/json; charset=utf-8
&lt; Etag: W/"47484987479c63ee1f544f7c94886d5d"
&lt; Cache-Control: max-age=0, private, must-revalidate
&lt; X-Request-Id: 5c6d5d7c-8289-45d7-8fb4-d0909e19898d
&lt; X-Runtime: 0.055496
* Server WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13) is not blacklisted
&lt; Server: WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13)
&lt; Date: Sat, 08 Aug 2015 09:23:59 GMT
&lt; Content-Length: 139
&lt; Set-Cookie: request_method=POST; path=/
&lt; Via: 1.1 vegur
&lt; 
* Connection #0 to host echo-data.herokuapp.com left intact
{"params":{"foo":"data","hello":"world","controller":"echo","action":"echo","echo":{"foo":"data"}},"request":{"body":"{\"foo\":\"data\"}"}}
</code></pre>

<p>As you can see from the last line, the data in the URI, <code>hello=world</code> have been put in the <code>params</code>. Same goes for data in the request body.</p>

<h2>Summary</h2>

<p>The above article and corresponding examples and code try to show to you how the <code>params</code> hash is the single place to go if you want
to process the data that a client program is sending to your Ruby on Rails end point.</p>

<p>Thanks for reading so far and your comments are always more than welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delayed Job Best Practices]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2014/12/12/delayed-job-best-practices/"/>
    <updated>2014-12-12T13:49:00+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2014/12/12/delayed-job-best-practices</id>
    <content type="html"><![CDATA[<p>Read my new article on <a href="http://www.sitepoint.com/delayed-jobs-best-practices/">Site Point about Delayed Job Best Practices</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You don't have to be afraid to test your UI - Page Object Pattern to the rescue]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2014/09/21/you-dont-have-to-be-afraid-to-test-your-ui-page-object-pattern-to-the-rescue/"/>
    <updated>2014-09-21T18:22:00+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2014/09/21/you-dont-have-to-be-afraid-to-test-your-ui-page-object-pattern-to-the-rescue</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Many software engineers do not write tests for their UI because they have a good reason not to. Firstly, they believe that UI changes frequently, so any test would have been vulnerable to frequent changes. Secondly, they do not know about the <a href="http://martinfowler.com/bliki/PageObject.html">Page Object Pattern</a>.</p>

<!-- more -->


<p>I have been introduced to Page Object Pattern by a QA Engineer, <a href="http://gr.linkedin.com/in/stylianospapadomichelakis">Stylianos Papadomichelakis</a> while we were colleagues at <a href="https://www.linkedin.com/company/e-travel-sa">E-TRAVEL S.A.</a>. He has been using that for his QA tests, although in the Java world. I was astounded by this pattern. What a pain I got while trying to migrate a huge test suite from <code>capybara</code> 1 to <code>capybara</code> 2. If only I had page object pattern from the beginning, a 2 weeks task would have finished in 2 days.</p>

<p>Martin Fowler <a href="http://martinfowler.com/bliki/PageObject.html">explains</a>, very clearly, as always, how useful this pattern is for testing UI, and how it can insulate your tests from the frequest UI changes. When using it, change effects on the UI of your application will not have to be propagated throughout your whole test suite, but only inside your page objects.</p>

<p>And thank God, for our <code>Ruby</code> world, there is an awesome implementation of the page object pattern. The gem is called <code>site_prism</code> and you can read about it here: <a href="https://github.com/natritmeyer/site_prism">Site Prism</a>. It has very good documentation and will really help you love this gem.</p>

<p>In this article, I am going to share with you my experience using this gem. Using it for quite some time on all of my projects since I met it, I have come up with some best practices which I am sharing with you here.</p>

<p>Let&rsquo;s start</p>

<h3>Use a <code>page_objects</code> directory</h3>

<p>Put your page object Ruby files inside a directory structure that would have as parent the <code>page_objects</code> directory. So, if for example you have a Rails application, the directory structure might be:</p>

<p><code>
app
bin
config
db
features
lib
log
page_objects
public
script
spec
tmp
vendor
</code></p>

<p>As you can see the <code>page_objects</code> is on the same directory level like the <code>features</code> which contains the <code>Cucumber</code> features and the <code>spec</code> which contains the <code>RSpec</code> test files. <code>Cucumber</code> and <code>RSpec</code> will both be using your <code>page_objects</code>.</p>

<h3>Use <code>&lt;your-app-name&gt;/page_objects</code> namespace</h3>

<p>Although you are free to put all of your page object files inside the <code>page_objects</code> directory, prefer to use a sub-directory with the name of your application that would function as namespace. Further namespace that, with the word <code>page_objects</code>. For example, if your application is called <code>bookstore</code>, then you can use the following tree to store your page objects:</p>

<p>```
page_objects
  |&ndash;> bookstore</p>

<pre><code>    |-&gt; page_objects
</code></pre>

<p>```</p>

<p>Any <code>.rb</code> file that you will be creating to hold a page object class, will need to be inside the corresponding module <code>Bookstore::PageObjects</code> that will work as a namespace.
Using namespace is a good practice in general and not only for the <code>site_prism</code> case we are discussing here. You will avoid having name conflicts with third-party gems.</p>

<h3>Use a file to require them all</h3>

<p>Write an <code>all_page_objects.rb</code> file that will require all the page objects Ruby files that would be living in your <code>page_objects</code> tree.</p>

<p><code>
page_objects
  |-&gt; bookstore
  |     |-&gt; page_objects
  |- all_page_objects.rb
</code></p>

<p>An implementation of <code>all_page_objects.rb</code> file might be something like the following:</p>

<p>```ruby</p>

<h1>file: page_objects/all_page_objects.rb</h1>

<p>#
current_path = File.expand_path(&lsquo;..&rsquo;, <strong>FILE</strong>)
$LOAD_PATH.unshift File.join(current_path, &lsquo;bookstore&rsquo;)</p>

<p>Dir.glob(File.join(current_path, &lsquo;<em>*&rsquo;, &lsquo;</em>.rb&rsquo;)).each do |f|
  require f
end
```</p>

<p>Having done that, you only have to require the <code>all_page_objects</code> file from your <code>spec_helper.rb</code> or <code>env.rb</code> file. And everytime a new page object file is defined, you do not have to require that explicitly.</p>

<h3>Different directory for pages and sections</h3>

<p>Site prism offers two classes to organize your page object code. Pages and Sections. Use a separate directory to hold your page classes and a separate directory to hold your sections classes.</p>

<p><code>
page_objects
  |-&gt; bookstore
  |     |-&gt; page_objects
  |           |-&gt; pages
  |           |-&gt; sections
  |- all_page_objects.rb
</code></p>

<p>You will use each one of these two directories to further namespace your classes. Hence all your page object classes that are pages will be <code>Bookstore::PageObjects::Pages::</code> namespaced, and all your page object classes that are sections will be <code>Bookstore::PageObjects::Sections::</code> namespaced.</p>

<h3>Follow your views directory structure</h3>

<p>Although you can put all your page classes inside the <code>page_objects/bookstore/page_objects/pages</code> directory, you should be further separating your pages directory into subdirectories that follow your views directory structure.</p>

<p>If for example you have a views directory that has two directories, <code>books</code> and <code>authors</code>, former one having the views that are related to <code>Book</code> resource and latter one having the views that are related to <code>Author</code> resource, you should have corresponding directories inside the <code>page_objects/pages</code> directory:</p>

<p><code>
page_objects
  |-&gt; bookstore
  |     |-&gt; page_objects
  |           |-&gt; pages
  |           |     |-&gt; books
  |           |     |-&gt; authors
  |           |-&gt; sections
  |- all_page_objects.rb
</code></p>

<p>Think about whether you can do the same for the <code>sections</code> too. If you have <code>sections</code> that are resource specific, you can follow a similar directory structure.</p>

<p>In any case, the page classes that you will define will need to be further namespaced.</p>

<h3>Follow your views templates</h3>

<p>When defining your actual page classes follow the views templates and create one page per template view. For example, if you have a view template that indexes all the books in your bookstore, e.g. <code>index.html.erb</code> inside the <code>books</code> view directory, then create the corresponding page inside the file <code>index_page.rb</code>. Similarly for <code>new</code>, <code>show</code>, <code>edit</code> views:</p>

<p><code>
page_objects
  |-&gt; bookstore
  |     |-&gt; page_objects
  |           |-&gt; pages
  |           |     |-&gt; books
  |           |     |---- index_page.rb
  |           |     |---- new_page.rb
  |           |     |---- show_page.rb
  |           |     |---- edit_page.rb
  |           |     |-&gt; authors
  |           |     |---- index_page.rb
  |           |     |---- new_page.rb
  |           |     |---- show_page.rb
  |           |     |---- edit_page.rb
  |           |-&gt; sections
  |- all_page_objects.rb
</code></p>

<p>Hence, your page classes will be defined as follows (example for the <code>index_page.rb</code> for <code>books</code>):</p>

<p>```ruby</p>

<h1>file: page_objects/bookstore/page_objects/pages/books/index_page.rb</h1>

<p>#
module Bookstore
  module PageObjects</p>

<pre><code>module Pages
  module Books
    class IndexPage &lt; SitePrism::Page
      # ... your page code goes here ... #
    end
  end
end
</code></pre>

<p>  end
end
```</p>

<h3>One file to model your application</h3>

<p>Create a file <code>application.rb</code> that will be used to instantiate the concrete page classes and will be used to access all the pages while working with site prism API on <code>feautures</code> <code>steps</code> or <code>spec</code> tests.
<code>
page_objects
  |-&gt; bookstore
  |     |-&gt; page_objects
  |           |-&gt; pages
  |           |     |-&gt; books
  |           |     |---- index_page.rb
  |           |     |---- new_page.rb
  |           |     |---- show_page.rb
  |           |     |---- edit_page.rb
  |           |     |-&gt; authors
  |           |     |---- index_page.rb
  |           |     |---- new_page.rb
  |           |     |---- show_page.rb
  |           |     |---- edit_page.rb
  |           |-&gt; sections
  |           |- application.rb
  |- all_page_objects.rb
</code></p>

<p>So, you are going to have <code>page_objects/bookstore/page_objects/application.rb</code>
Here is a sample implementation in order to understand what I am talking about:</p>

<p>```ruby</p>

<h1>file: page_objects/bookstore/page_objects/application.rb</h1>

<p>#
module Bookstore
  module PageObjects</p>

<pre><code>class Application
  def initialize
    @pages = {}
  end

  def home
    @pages[:home] ||= Bookstore::PageObjects::Pages::HomePage.new
  end

  def sign_in
    @pages[:sign_in] ||= Bookstore::PageObjects::Pages::SignInPage.new
  end

  def checkout
    @pages[:checkout] ||= Bookstore::PageObjects::Pages::CheckoutPage.new
  end
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>When you will be using site prism, you will only be instantiating the <code>Bookstore::PageObjects::Application</code> class once and then you will be invoking page methods to access specific pages. For example:</p>

<p>If using <code>Cucumber</code>, inside the <code>features/support/hooks.rb</code> file you can have</p>

<p><code>ruby
Before do |scenario|
  @app ||= Bookstore::PageObjects::Application.new
end
</code></p>

<p>which will instantiate the <code>Bookstore::PageObjects::Application</code> and store it in <code>@app</code> that you can use to load and access pages as follows (in your <code>steps</code>):</p>

<p>```ruby
When(/^User visits the home pages$/)do
  @app.home.load
end</p>

<p>When(/^User visits the sign in page$/) do
  @app.sign_in.load
end
```</p>

<p>You can see that the <code>Bookstore::PageObjects::Application</code> is being instantiated only once and each page is being instantiated only once too. The application instance is using, internally, a hash to store the instances of the necessary pages. So, everytime you need a page, either an existing instance of the page will be returned, if you have requested same page in the past, case in which it will be located in the <code>@pages</code> hash, or a new instance will be created.</p>

<h3><code>elements</code> vs <code>sections</code></h3>

<p>Sometimes, especially when you are new to site prism, you cannot decide very easily when you should be using <code>elements</code> vs <code>sections</code>.</p>

<p>If you understand the difference between an <code>element</code> and a <code>section</code> then it should be easy.</p>

<p><code>element</code> is primitive dom selection that cannot contain other elements.</p>

<p><code>section</code> should be used whenever you have a dom area that you want to select and that you want to treat its constituent elements separately, with further site prism API manipulation. In other words, <code>section</code> should be containing one or more <code>element</code> (and/or other <code>element</code>s, <code>elements</code>, <code>section</code>s or <code>sections</code>).</p>

<p>Finally, both <code>elements</code> and <code>sections</code> select structures of the dom that appear as arrays in the dom. <code>elements</code> select an array of <code>element</code>. <code>sections</code> select an array of <code>section</code>.</p>

<p>Hence, if you have an index page that displays the list of books, you can have the following inside the index page definition:</p>

<p>```ruby</p>

<h1>file: page_objects/bookstore/page_objects/pages/books/index_page.rb</h1>

<p>#
module Bookstore
  module PageObjects</p>

<pre><code>module Pages
  module Books
    class IndexPage &lt; SitePrism::Page

      elements :book_items, '#books-table tr.book-item'

    end
  end
end
</code></pre>

<p>  end
end
```</p>

<p>which will give you access to each one of the table rows that are used to display a book entry. But this definition does not allow to do too much with the book item itself.</p>

<p>If for example, you want to access details of the book, you can use a section and say that you have an array of sections, as follows:</p>

<p>```ruby</p>

<h1>file: page_objects/bookstore/page_objects/pages/books/index_page.rb</h1>

<p>#
require &ldquo;bookstore/page_objects/sections/books/book_entry_section&rdquo;</p>

<p>module Bookstore
  module PageObjects</p>

<pre><code>module Pages
  module Books
    class IndexPage &lt; SitePrism::Page

      sections :book_items, Bookstore::PageObjects::Sections::Books::BookEntrySection, '#books-table tr.book-item'

    end
  end
end
</code></pre>

<p>  end
end
```</p>

<p>And then you need to define the book entry details in the corresponding section file:</p>

<p>```ruby</p>

<h1>file: page_objects/bookstore/page_objects/sections/books/book_item_section.rb</h1>

<p>#
module Bookstore
  module PageObjects</p>

<pre><code>module Sections
  module Books
    class BookItemSection &lt; SitePrism::Section
      element :title,        'td.title'
      element :author,       'td.author'
      element :published_at, 'td.published-at'
    end
  end
end
</code></pre>

<p>  end
end
```</p>

<p>But, again&hellip;.</p>

<h3>Prefer inline <code>section</code> (and <code>sections</code>) blocks</h3>

<p>You should not be using separate class definitions for sections of pages that are not reusable among pages. It&rsquo;s waste of effort, time and requires more maintenance. Create a separate class, on a seperate file, for a section, only if this section can be reused among page definitions. Otherwise, define the section elements inline with a block.</p>

<p>Hence, the above implementation for the book item, is not something that I recommend. I wouldn&rsquo;t create a section for that. You should just define the section elements inline as follows:</p>

<p>```ruby</p>

<h1>file: page_objects/bookstore/page_objects/pages/books/index_page.rb</h1>

<p>#
require &ldquo;bookstore/page_objects/sections/books/book_entry_section&rdquo;</p>

<p>module Bookstore
  module PageObjects</p>

<pre><code>module Pages
  module Books
    class IndexPage &lt; SitePrism::Page
      # .... other index page code .... #

      sections :book_items, '#books-table tr.book-item' do
        element :title,        'td.title'
        element :author,       'td.author'
        element :published_at, 'td.published-at'
      end                    

      # ... other index page code ... #
    end
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Doing so, I do not have to create another class file specific to this section.</p>

<p>Note that this hint is valid both for <code>section</code> and <code>sections</code>, of course.</p>

<h3>Use ids &ndash; Do not use style properties for selectors</h3>

<p>This suggestion goes out of the scope of site prism. When you are using selectors to select dom elements on your tests use html element ids, e.g. &lsquo;#books-table&rsquo; as much as you can. Do not use other attributes that style your elements or depend on the layout and structure of your dom. They are brittle to change. And if you write your tests and you see that your pages are missing ids that would help you write your tests, then go back to your core code and add ids.</p>

<h2>Final</h2>

<p>I believe that the page object pattern is a fantastic practice to isolate your tests from accessing UI test API (like <code>Capybara</code>) directly. And <a href="https://github.com/natritmeyer/site_prism">site_prism</a> is a perfect implementation.</p>

<p>I hope that the above notes can help you organize your page objects code and become a practice in your development/QA team. Or at least start a discussion inside it about how you can better organize your page objects code.</p>

<p>I would appreciate any comment and feedback to make the above even better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[United States, Counties, Cities, Zips CSV & Ruby loading code]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2014/08/29/united-states-counties-cities-csv-ruby-loading-code/"/>
    <updated>2014-08-29T19:28:00+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2014/08/29/united-states-counties-cities-csv-ruby-loading-code</id>
    <content type="html"><![CDATA[<p>I just wanted to have the United States, their Counties, the Cities in the Counties and the Zip codes in each City in CSV format. But I wanted that normalized. In different CSVs. So, here it is.
You can also find here some Ruby on Rails sample code that loads these files. Primitive stuff, but sometimes useful.</p>

<div style="width: 100%;text-align: right;font-size: 0.8em;">My sponsor on that is <a href="https://www.bookandtable.com">Book&Table</a></div>


<div style="width: 100%;text-align: right;font-size: 0.8em;">I am about to start a Seminar: Introduction to Programming. If you are interested in, <a href="http://pmatsinopoulos.github.io/introduction-to-programming-notify-when-public">register here</a>.</div>




<!-- more -->


<ul>
<li>Here is the <a href="/csv/states.csv.tar.gz">list of states</a>.</li>
<li>Here is the <a href="/csv/counties.csv.tar.gz">list of counties</a>. It has all counties and which State they belong to.</li>
<li>Here is the <a href="/csv/cities.csv.tar.gz">list of cities</a>. It has all the cities and the County they belong to.</li>
<li>Here is the <a href="/csv/zips.csv.tar.gz">list of zip codes</a>. It has all the zip codes and the city they correspond to (specified by city name, county name and state code).</li>
</ul>


<h2>ActiveRecord Models</h2>

<h3>State</h3>

<p>```</p>

<h1>State</h1>

<p>class State &lt; ActiveRecord::Base
  has_many :counties, inverse_of: :state, dependent: :destroy
  validates :name,           presence: true, uniqueness: {case_sensitive: false}
  validates :two_digit_code, presence: true, uniqueness: {case_sensitivie: false}
end
```</p>

<h3>County</h3>

<p>```</p>

<h1>County</h1>

<p>class County &lt; ActiveRecord::Base
  belongs_to :state, inverse_of: :counties
  has_many   :cities, inverse_of: :county, dependent: :destroy</p>

<p>  validates :state, presence: true
  validates :name,  presence: true, uniqueness: {case_sensitive: false, scope: :state_id}
end
```</p>

<h3>City</h3>

<p>```</p>

<h1>City</h1>

<p>class City &lt; ActiveRecord::Base
  belongs_to :county, inverse_of: :cities</p>

<p>  validates :county, presence: true
  validates :name,   presence: true, uniqueness: {case_sensitive: false, scope: :county_id}
end
```</p>

<h3>Zip</h3>

<p>```</p>

<h1>Zip</h1>

<p>class Zip &lt; ActiveRecord::Base
  belongs_to :city, inverse_of: :zips</p>

<p>  validates :city, presence: true
  validates :code, presence: true, uniqueness: {case_sensitive: false}
end</p>

<p>```</p>

<h3>Loading States</h3>

<p><code>
puts "Loading States..."
CSV.foreach("#{Rails.root}/db/states.csv") do |row|
  state_code = row[0]
  state_name = row[1]
  State.create_with(name: state_name).find_or_create_by!(two_digit_code: state_code)
end
puts "...end of loading States"</code>
```</p>

<h3>Loading Counties</h3>

<p><code>
puts "Loading Counties..."
CSV.foreach("#{Rails.root}/db/counties.csv") do |row|
  state_code  = row[0]
  county_name = row[1]
  County.find_or_create_by!(state_id: State.find_by_two_digit_code(state_code).id, name: county_name)
end
puts "...end of loading Counties"
</code></p>

<h3>Loading Cities</h3>

<p>```
puts &ldquo;Loading Cities&hellip;&rdquo;</p>

<p>CSV.foreach(&ldquo;#{Rails.root}/db/cities.csv&rdquo;) do |row|
  state_two_digit_code = row[0]
  state_id = State.find_by_two_digit_code!(state_two_digit_code).id</p>

<p>  county_name = row[1]
  city_name   = row[2]
  county      = County.find_by_state_id_and_name!(state_id, county_name)
  City.find_or_create_by!(county_id: county.id, name: city_name)
end</p>

<p>puts &ldquo;&hellip;end of loading Cities&rdquo;</p>

<p>```</p>

<h3>Loading Zip Codes</h3>

<p>```
puts &ldquo;Loading Zips&hellip;&rdquo;</p>

<p>CSV.foreach &ldquo;#{Rails.root}/db/zips.csv&rdquo; do |row|
  zip_code  = row[0]
  city      = row[1]
  county    = row[2]
  state     = row[3]
  state_id  = State.find_by_two_digit_code!(state).id
  county_id = County.find_by_name_and_state_id!(county, state_id).id
  Zip.create_with(city_id: City.find_by_name_and_county_id!(city, county_id).id).find_or_create_by!(code: zip_code)
end</p>

<p>puts &ldquo;&hellip;end of loading Zips&rdquo;
```</p>

<div style="width: 100%;text-align: right;font-size: 0.8em;">My sponsor on that is <a href="https://www.bookandtable.com">Book&Table</a></div>


<div style="width: 100%;text-align: right;font-size: 0.8em;">I am about to start a Seminar: Introduction to Programming. If you are interested in, <a href="http://pmatsinopoulos.github.io/introduction-to-programming-notify-when-public">register here</a>.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using string column type for migrations]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2014/06/11/using-string-column-type-for-migrations/"/>
    <updated>2014-06-11T22:48:00+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2014/06/11/using-string-column-type-for-migrations</id>
    <content type="html"><![CDATA[<p>Ruby on Rails migrations are used to create the necessary tables inside our database. One of the most frequently used column type is <code>string</code>.
Here is an example of an <code>ActiveRecord::Migration</code> that uses this type:</p>

<!-- more -->


<p>```ruby
class CreateAuthors &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :authors do |t|
  t.string :name,      null: false
  t.string :biography, null: false
end
</code></pre>

<p>  end
end
```</p>

<p>But what actual sql type did that migration create for the <code>string</code> type?</p>

<p>If we run this migration against a <strong>MySQL</strong> database, we can see the
actual table that creates using the <code>mysql</code> command <code>show create table authors</code>. The output will be the following:</p>

<p><code>sql
+---------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table   | Create Table                                                                                                                                                                                                                                                            |
+---------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| authors | CREATE TABLE `authors` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `biography` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci |
+---------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
</code></p>

<p>As you can see, the <code>string</code> is translated to <code>varchar(255)</code>. This is the type that allows to store strings with maximum length 255. What if we want to increase the maximum length?
How can we do that? In that case, you need to use the <code>limit:</code> option. Let&rsquo;s say that we want the <code>biography</code> column to have maximum length 1024. We have to change the corresponding
line in the above migration as follows:</p>

<p><code>ruby
t.string :biography, null: false, limit: 1024
</code></p>

<p>If you do this change and run your migration, the table that is created is the following:</p>

<p><code>sql
+---------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table   | Create Table                                                                                                                                                                                                                                                             |
+---------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| authors | CREATE TABLE `authors` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `biography` varchar(1024) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci |
+---------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
</code></p>

<p>As you can see, we have managed to change the maximum number of characters that <code>biography</code> column can hold. Please, note that the maximum length for a <code>varchar</code> column in
MySQL is <code>65535</code> <strong>theoretically</strong>. In practice, this is limited by the maximum row size (<code>65535 bytes</code> which is shared among all columns of the table) and the character set
used. So, for utf-8 database collation, this might be quite smaller.</p>

<p>Perfect. And what if we want to store a text that is longer than <code>65535</code> characters long? What is the option that we have?</p>

<p>If you try to set a bigger limit, you will probably get an error. The next option is to use the migration type <code>text</code>.</p>

<p>If you change your migration for <code>biography</code> as follows:</p>

<p><code>ruby
t.text :biography, null: false
</code></p>

<p>then the table that is created:</p>

<p><code>sql
+---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table   | Create Table                                                                                                                                                                                                                                                    |
+---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| authors | CREATE TABLE `authors` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `biography` text COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci |
+---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
</code></p>

<p>As you can see, the <code>text</code> migration type has been translated to <code>text</code> MySQL type. And the question now is: Is that bigger than <code>varchar(65535)</code>? The answer is no. <a href="http://dev.mysql.com/doc/refman/5.5/en/storage-requirements.html">MySQL
documentation</a> mentions that <code>text</code> maximum length is 2<sup>16</sup>.</p>

<p>So, if you really want to store larger texts than that, you need to consider the two MySQL types: <code>mediumtext</code> and <code>longtext</code>. These can store really huge amounts of text.
<code>mediumtext</code> can store up to 2<sup>24</sup> and <code>longtext</code> up to 2<sup>32</sup>.</p>

<p>The problem here is that if, for example, you want the <code>biography</code> to be a <code>longtext</code>, this:</p>

<p><code>ruby
t.longtext :biography, null: false
</code></p>

<p>will not work. Trying to run this migration will give you the following error:</p>

<p><code>bash
undefined method `longtext' for #&lt;ActiveRecord::ConnectionAdapters::TableDefinition:0x...db/migrate/..._create_authors.rb:5:in `block in change'
</code></p>

<p>This is because <code>longtext</code> is not considered a standard migration column type. Neither <code>mediumtext</code> does.</p>

<p>The alternative here is to use the <code>column</code> method instead, and pass the column type as 2nd argument:</p>

<p><code>ruby
t.column :biography, :longtext, null: false
</code></p>

<p>This will run successfully and will generate the table:</p>

<p><code>sql
+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table   | Create Table                                                                                                                                                                                                                                                        |
+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| authors | CREATE TABLE `authors` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `biography` longtext COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci |
+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
</code></p>

<p>You are done!</p>

<p><strong>Note</strong>: For those that are using PostgreSQL:</p>

<p>1) The default <code>string</code> migration type is translated to <code>character varying(255)</code>. See how the table is created with defaults:</p>

<p>```sql</p>

<pre><code>                               Table "public.authors"
</code></pre>

<p>  Column   |          Type           |                      Modifiers
&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
 id        | integer                 | not null default nextval(&lsquo;authors_id_seq&rsquo;::regclass)
 name      | character varying(255)  | not null
 biography | character varying(255)  | not null
Indexes:</p>

<pre><code>"authors_pkey" PRIMARY KEY, btree (id)
</code></pre>

<p>```</p>

<p>2) If you use the <code>limit:</code> option you can change the default <code>255</code> to whatever.</p>

<p>3) Note that <code>text</code> and <code>character varying(n)</code> in PostgreSQL are the same except from the fact that <code>character varying(n)</code> puts a limit. <code>text</code> does not have one.</p>

<p>4) You cannot use <code>mediumtext</code> or <code>longtext</code> with PostgreSQL. <code>text</code> does the job for you.</p>

<p>BTW: I am preparing a course <code>Introduction to Programming</code>. I know that most of you do not need such course but you may know somebody that might be. You can send them
the link to pre-register for a discount when this comes public. Here it is <a href="http://pmatsinopoulos.github.io/introduction-to-programming-notify-when-public">Introduction to Programming</a>.</p>
]]></content>
  </entry>
  
</feed>
