<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Panos Matsinopoulos]]></title>
  <link href="http://pmatsinopoulos.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://pmatsinopoulos.github.io/"/>
  <updated>2021-03-28T09:56:28+03:00</updated>
  <id>http://pmatsinopoulos.github.io/</id>
  <author>
    <name><![CDATA[Panos Matsinopoulos]]></name>
    <email><![CDATA[panayotis@matsinopoulos.gr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Try Objective-C on Code School]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2015/08/17/try-objective-c-on-code-school/"/>
    <updated>2015-08-17T23:31:00+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2015/08/17/try-objective-c-on-code-school</id>
    <content type="html"><![CDATA[<p>Having done the Apple developer tutorial Getting Started on iOS development, the next was to have a deeper dive in
Objective-C. Looking around for online Objective-C tutorials, I came across a very good one, on <a href="https://www.codeschool.com">Code School</a>.
The tutorial is called <a href="http://tryobjectivec.codeschool.com/levels/1">Try Objective-C</a>.</p>

<!-- more -->


<h2>NSLog</h2>

<p><code>NSLog</code> method is used to log stuff on console.</p>

<h2><code>@</code> Prefix on Literal Values</h2>

<p><code>@"..."</code>: This is an <code>NSString *</code> literal.</p>

<h2>Store Numbers</h2>

<p><code>NSNumber *</code>: Useful object to store numbers.</p>

<p>Example:</p>

<pre><code>NSNumber *myAge = @44;
</code></pre>

<p>See how the literal on the right, has the <code>@</code> symbol prefix, necessary to assign to an <code>NS</code> object.</p>

<h2>Construct Arrays</h2>

<p>For arrays use <code>NSArray *</code></p>

<p>Example:</p>

<pre><code>NSArray *fruits = @[@"Apples", @"Oranges", @"Pears"];
</code></pre>

<p>Watch out the @ prefix both in front of array literal and in front of the string literals.</p>

<p>And access value of an item by position: fruits[0], fruits[1] e.t.c.</p>

<h2>Mutable Arrays</h2>

<p><code>NSArray</code> is immutable. So, you cannot change it. Use <code>NSMutableArray</code> if you want to create an array that
can be changed.</p>

<h2>Hashes and Dictionaries</h2>

<p>How to create hashes or dictionaries? Use the <code>NSDictionary *</code>.</p>

<p>Example:</p>

<pre><code>NSDictionary *person = @{@"First Name": @"Panos"};
</code></pre>

<p>We can access the values using the keys:</p>

<pre><code>person[@"First Name"]   
</code></pre>

<h2>Send message to an object:</h2>

<pre><code>[objectVar methodName];
</code></pre>

<h2>Method description</h2>

<p>Use method &ldquo;description&rdquo; to get a nice-to-read representation of an object:</p>

<pre><code>[objectVar description]
</code></pre>

<h2>Unsigned Integers</h2>

<p><code>NSUInteger</code> is a type to stored unsigned integers.</p>

<p>Example:</p>

<pre><code>NSUInteger = 5;
</code></pre>

<h2>Operations with NSNumbers</h2>

<p>This is not so straight forward. You can not just use the + operator, for example.
You need to get the <code>NSUInteger</code> version of the <code>NSNumber *</code> and then operate on that.</p>

<pre><code>NSNumber *first = @1;
NSNumber *second = @2;
NSUInteger uiFirst  = [first unsignedIntegerValue];
NSUInteger uiSecond = [second unsignedIntegerValue];
</code></pre>

<p>Then</p>

<pre><code>uiFirst + uiSecond
</code></pre>

<h2>Appending Strings</h2>

<p>This will not work: <code>@"foo" + @"bar"</code>.</p>

<p>But this will do:</p>

<pre><code>[@"foo " stringByAppendingString:@"bar"]
</code></pre>

<h2>Initialize String</h2>

<p>You can use <code>stringWithString:</code> to initialize a string.</p>

<p>Example:</p>

<pre><code>NSString *firstName = [NSString stringWithString:@"foo"];
</code></pre>

<h2>Alloc &amp; Init</h2>

<p>Create an <code>NSString</code> with <code>alloc</code> and <code>init</code>.</p>

<p>Examples:</p>

<pre><code>NSString *firstName = [[NSString alloc] initWithString:@"foo"];
</code></pre>

<h2>Comparing 2 NSStrings</h2>

<pre><code>[firstName isEqualToString:anotherFirstName]            
</code></pre>

<h2>Enumerate on Arrays</h2>

<p>Enumerate and work on each one of the items of an array:</p>

<p>Example:</p>

<pre><code> NSArray *fruits = @[@"Apples", @"Oranges", @"Pears"];
 for (NSString *fruit in fruits) {
   NSLog(fruit);
 }
</code></pre>

<h2>Code Blocks</h2>

<p>Code blocks work like anonymous functions or closures.</p>

<p>Here is an example of a block that takes arguments and returns value.</p>

<pre><code>NSString * (^sayHello)(NSString *) = ^(NSString *name){
  [NSString stringWithFormat: @"Hello %@", name];
};
</code></pre>

<h2>Enumerate using blocks</h2>

<p>You can send a whole block as an argument to an enumeration
and have the block applied to each one of the elements.</p>

<pre><code>NSArray *funnyWords = @[@"Goobly", @"Blobie", @"Fnogie"];
[funnyWords enumerateObjectsUsingBlock: 
    ^(NSString *word, NSUInteger index, BOOL *stop) {
       NSLog(@"%@ is a funny word", word);
    }
];
</code></pre>

<h2>Defining Class Properties</h2>

<p>This is an example of defining class properties.</p>

<p>Example:</p>

<pre><code>@interface Person : NSObject

@property NSString *firstName;
@property NSString *lastName;

@end        
</code></pre>

<p>The above creates 2 public properties. And 4 methods.
2 setters and 2 getters. One setter to set firstName
and one setter to set lastName. One getter to get firstName
and one getter to get lastName. Also, it creates a class
instance variable with name &ldquo;<em>firstName&rdquo; and another one
with name &ldquo;</em>lastName&rdquo; that one can access directly from the
implementation code of the class. However, clients of the class
cannot access them.</p>

<h2>Public Methods</h2>

<p>When you want to declare the public behaviour of a class you declare       <br/>
it on the interface level</p>

<pre><code>@interface Person : NSObject

-(void)sayHello;

@end
</code></pre>

<p>and you implement that on the implementation file, e.g. in <code>Person.m</code></p>

<pre><code>@implementation Person

-(void)sayHello {
   NSLog(@"Hello");
}
end
</code></pre>

<p>Then when you want to call that method, you send the message to the object instance:</p>

<pre><code>Person *p = [[Person alloc] init];
[p sayHello];
</code></pre>

<h2>Method with arguments</h2>

<p>When a method takes arguments, then we are using <code>:</code> to separate the method name from the
argument definition:</p>

<pre><code>@interface Person : NSObject

-(NSString *)speak:(NSString *)greeting;

@end    
</code></pre>

<p>Or when it takes 2 arguments, for example &ldquo;greeting&rdquo; and &ldquo;times&rdquo;:</p>

<pre><code>-(NSString *)speak:(NSString *) greeting soManyTimes:(NSNumber *)times;
</code></pre>

<p>The method name now is <code>speak:soManyTimes:</code></p>

<p>From the number of colons inside the name we can tell how many arguments
it requires when called.</p>

<p>You can make a property readonly as follows:</p>

<pre><code>@interface Person : NSObject

@property (readonly) NSNumber *salary;

@end
</code></pre>

<h2>Overriding Default Object Constructor</h2>

<p>The default object constructor is <code>init</code>. We can override that
in the implementation of the class.</p>

<pre><code>@implementation Person

-(Person *)init {
  _salary = @18;
  return [super init];
}

@end
</code></pre>

<p>Calling <code>return [super init];</code> is usually necessary in order
to make sure that the Person is correctly constructed as an NSObject.</p>

<h2>Instance Variables</h2>

<p>Instance variables are declared in the interface.</p>

<pre><code>@interface Coffee : NSObject {
  NSNumber *_temperature;
}
@end    
</code></pre>

<h2>Check whether object responds to a method</h2>

<p>We can check whether an object responds to a method at run-time
using the <code>respondsToSelector:</code> method</p>

<p>Example:</p>

<pre><code>if ([coffee respondToSelector:@selector(brew)]) {
  NSLog(@"Coffee responds to brew message");
}
</code></pre>

<h2>Protocols</h2>

<p>Protocols are sets of methods that need to be implemented by a class.
Which protocols a class needs to implement is declared in the interface
of the class. Example:</p>

<pre><code>@interface Person : NSObject &lt;NSCopying&gt;
@end
</code></pre>

<p>Person class derives from <code>NSObject</code> and also implements the protocol <code>NSCopying</code>.</p>

<p>Whereas standard constructor/initializer is the <code>init</code> method, one can
declare custom initializers. These are methods that have a name that
starts with <code>init</code>.</p>

<p>Example:</p>

<pre><code>@interface Person : NSObject

-(Person *) initWithFirstName:(NSString *)firstName
                     lastName:(NSString *)lastName;

@end        
</code></pre>

<p>and then in the implementation you can assign the arguments to properties or
instance variables.</p>

<p>When you instantiate the object you can call:</p>

<pre><code>Person *p = [[Person alloc] initWithFirstName:@"First" lastName:@"Last"];
</code></pre>

<h2>Object instance responds to class</h2>

<p>An object instance responds to <code>class</code> which returns the class of the object.
This can be used, for example, to dynamically instantiate an object.</p>

<pre><code>[[[objectVar class] alloc] init];
</code></pre>

<p>without knowing the actual class of the object instance.</p>

<p>Use the special type <code>id</code> instead of <code>NSObject *</code> for when you have
a generic Objective-C object that you don&rsquo;t know the type of at
compile time.</p>

<h2>What&rsquo;s Next from Here ##</h2>

<p>I will go to <a href="http://www.binpress.com/tutorial/learn-objectivec-in-24-days/38">Learn Objective-C in 24 Days</a>.
But first, I may take a short break to work with <code>Swift</code>. It seems that it may be more Ruby-like language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First iOS App]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2015/08/14/my-first-ios-app/"/>
    <updated>2015-08-14T07:40:00+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2015/08/14/my-first-ios-app</id>
    <content type="html"><![CDATA[<p>This is my first encounter with iOS apps and Objective C. I followed the whole tutorial which is given <a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/index.html#//apple_ref/doc/uid/TP40011343-CH2-SW1">here</a>.
I am a Ruby developer and I decided to take this trip to iOS development because it is necessary for my work. I am offering professional services to <a href="https://www.bookandtable.com">Book&amp;Table</a>, which
is sponsoring me writing this blog post.</p>

<p>Following this tutorial, I had to keep some notes. Here are the most important ones. Maybe you will find them useful too. But most importantly, I am seeking feedback from experienced
iOS developers.</p>

<!-- more -->


<p>You can find the source code of the small application <a href="https://github.com/pmatsinopoulos/todo-obj-c">here</a></p>

<h2>Setup your Dev Env</h2>

<p>The tutorial explains very well how to setup your development environment. And your development environment comes for free with XCode and iOS SDK.
There are tools that contain everything and the UI is rich, with integrated debugger and tools to do graphical programming and design of your
app.</p>

<h2>I do not know Objective-C</h2>

<p>Although I have built lots of programs in C, I have never built one in Objective-C. So, the tutorial does an introduction to this language.</p>

<h3>Calling a method on a object</h3>

<pre><code>[someObjectInstance someMethodName]
</code></pre>

<h2>Application Templates</h2>

<p>XCode offers you the ability to start a project using an application template. The tutorial works with the <code>Single View Application</code> template.
I suppose that when I will get more familiar with XCode and Objective-C I will be able to use other templates too.</p>

<h2>Run Simulator</h2>

<p>This is fantastic. You can run a simulator from within XCode and see how your application would look like in various devices. Tutorial explains how to do that.</p>

<h2>main.m</h2>

<p>Cool. Like in C, there is a file that contains the <code>main</code> function. The Objective-C files that contain the implementation (rather than the interface) have
an extension that ends with <code>.m</code> (rather than with <code>.c</code> or <code>.cpp</code>).</p>

<h2>Application &amp; AppDelegate</h2>

<p>There are two objects that work together in order for the app to work. The application object and the app delegate object. The application object calls
specific methods on app delegate object and allows app delegate object to customize the app behaviour.</p>

<p>The app delegate object is defined in <code>AppDelegate.h</code> and implemented in <code>AppDelegate.m</code> file.</p>

<p>Reading the method names and the comments of the <code>AppDelegate.m</code> file, I understand that an application follows a life cycle through the following states:</p>

<ul>
<li>launch -> active</li>
<li>active -> inactive     Goes to inactive, when for example an incoming call is intercepted.</li>
<li>inactive -> background When the user quits, the application might go to background state instead of being terminated.</li>
<li>background -> inactive When the application goes back from background to inactive</li>
<li>inactive -> active</li>
<li>terminated When the application terminates</li>
</ul>


<h2>Storyboard</h2>

<p>There is a tool that helps you design the flow of your application. This is the storyboard. Your application is going to be
comprised of various stories each one linked to another. This will be the application flow.</p>

<h2>The Canvas and Adaptive Interface</h2>

<p>The canvas that is used to design your stories does not have the size of a specific iOS device. It is generic. You are responsible
to make your application being adaptive. And the tutorial does an introduction on the adaptive app design. It teaches you how to use
the Auto Layout feature that helps you position your elements in such a way that they will be looking good on all iOS devices.</p>

<h2>Object Library</h2>

<p>While you are doing the UI design of your app, you can use the Object Library that contains a big list of visual, and other items,
ready for you to use in order to build your app interface.</p>

<h2>Model View Controller</h2>

<p>The application design uses the MVC (Model View Controller) architecture.</p>

<h2>Views</h2>

<p>All the visual elements that you put on an application &ldquo;page&rdquo; are called <code>views</code>. So, for example, an input text field is a view.
However, the views can contain other views and you can have a view hierarchy.</p>

<p>At the top of the view hierarchy is the <code>window</code> object (look at file <code>AppDelegate.h</code>).</p>

<p>The <code>UIKit</code> framework provides many different views ready for you to use in order to let your users interact with your application.
All the views are classes of <code>UIView</code> class. You can customize and create your own views by subclassing this class.</p>

<h2>Storyboards</h2>

<p>You use storyboards to design the interface of your app. The <code>Main.storyboard</code> is the one that is automatically created for you by
XCode project wizard, when you chose the simple view application template.</p>

<h2>Scenes</h2>

<p>Each storyboard is composed of scenes. Can I think about scenes like I think about web pages when I build a Web application? I guess
so. The scene has its own view hierarchy. Like a page has a list/tree of HTML tags that are used to render the page.</p>

<h2>Inspector Pane</h2>

<p>This is used to configure the views. So, you select a view and then you use Inspector Pane on the right to configure the properties
of the view.</p>

<h2>View Controllers</h2>

<p>These implement the application behaviour. Events go from views to view controllers which then inform data model layer and then
the other way around. View controllers can be thought of as Controllers in Ruby on Rails. The view controller is an instance of <code>UIViewController</code> class.</p>

<p>A view controller manages a single view hierarchy. And usually, you create a custom <code>UIViewController</code> class in order to manage it.</p>

<h2>Navigation Controller</h2>

<p>This is a specialized view controller that is used to navigate from one view hierarchy to another. In other words from one page to
another. You can think about the navigation controller like a top navigation bar that you may have put into a layout file in your Rails application.
The set of view controller managed by a particular navigation controller is called the navigation stack.</p>

<p>Note that navigation controller, besides managing the transition from one view controller to another, it is responsible for presenting custom
views that belong to its own hierarchy.</p>

<p>Embed your first view controller into a navigation controller, by selecting the view controller and then selecting &ldquo;Editor > Embed In > Navigation Controller&rdquo;.
This will create a new navigation controller that has as root view controller the one embedded.</p>

<h2>Segue</h2>

<p>The segue is a transition from one view controller to another. There are actually various types of segues that can be used to
link one view controller to another.</p>

<ul>
<li>Show</li>
<li>Show detail</li>
<li>Present modally</li>
<li>Popover presentation</li>
<li>Custom</li>
<li>Unwind</li>
</ul>


<p>Because a <em>segue</em> is an object that holds the transition from one view controller to another, it is aware of both the source view controller
and the destination view controller.</p>

<h2>The Storyboard Entry Point</h2>

<p>This is an arrow in your storyboard editor that tells which scene is the one that should be presented first when the app starts.</p>

<h2>Modal View Controller</h2>

<p>The modal view controller is created when the segue that takes you to the view controller is of modal mode. The modal view controller
does not get a navigation bar because it is not added to the navigation stack. In that case, you may want to embed the modal view controller
it its own navigation controller.</p>

<h2>Customized View Controllers</h2>

<p>You need to create files (<code>*.h</code> and <code>*.m</code>) that define a class that derives from standard view controller classes. Then you need to use the
inspector editor to define that your scene is using the particular customized view controller.</p>

<h2>Exit From Scene</h2>

<p>You can exit from a scene as follows. You ctrl click on the navigation bar item that you want to be used for exit and your drag and drop it
on the &ldquo;Exit&rdquo; icon on top of the scene design area. Then you specify which method to call. You should have defined the method to call before
doing this. That method is an <code>IBAction</code> and when you do the drag and drop a list with the <code>IBActions</code> are presented for you to select.</p>

<h2>Foundation Framework</h2>

<p>This is one of the most basic and most important frameworks that Objective-C offers.
Includes:</p>

<ol>
<li>value classes &amp;</li>
<li>collection classes</li>
</ol>


<p>Examples of value objects:</p>

<ul>
<li>NSString</li>
<li>NSNumber</li>
</ul>


<h2>NSString</h2>

<p>This is an object wrapper for string.</p>

<p>Examples:</p>

<pre><code>NSString *myString = @"Hello World";
</code></pre>

<p>The <code>@</code> symbol is necessary when assigning a literal string to an NSString object.</p>

<h2>NSNumber</h2>

<p>Similarly to <code>NSString</code>, you can prefix a number literal with the symbol <code>@</code> in order to create an <code>NSNumber</code> instance.</p>

<p>Example:</p>

<pre><code>NSNumber *myAge = @44;
</code></pre>

<h2>Collection Objects</h2>

<p>The most important collection objects of the Foundation framework are:</p>

<ol>
<li><code>NSArray</code> (and its mutable counterpart <code>NSMutableArray</code>)</li>
<li><code>NSSet</code> (and its mutable counterpart <code>NSMutableSet</code>)</li>
<li><code>NSDictionary</code> (and its mutable counterpart <code>NSMutableDictionary</code>)</li>
</ol>


<h2>Define Custom Classes</h2>

<p>You declare the interface in a <code>.h</code> file and the implementation in a <code>.m</code> file.</p>

<p>Example:</p>

<pre><code>@interface ToDoItem : NSObject

@end
</code></pre>

<p>is the <code>ToDoItem.h</code> file.</p>

<p>and the</p>

<pre><code>@implementation ToDoItem

@end
</code></pre>

<p>is the <code>ToDoItem.m</code> file.</p>

<h2>Use Properties to Store Object&rsquo;s Data</h2>

<p>The properties are defined inside the interface part of the class definition. Example:</p>

<pre><code>@interface ToDoItem : NSObject

@property NSString *itemName;
@property BOOL completed;

@end
</code></pre>

<p>And you can declare a property to be readonly as follows:</p>

<pre><code>@property (readonly) NSDate *completionDate;
</code></pre>

<h2>Instance VS Class Methods</h2>

<p>The instance methods are defined using the <code>-</code> sign whereas the
class methods are defined using the <code>+</code> sign.</p>

<p>Example:</p>

<pre><code>@interface Person : NSObject

-(void) speak;
+(void) clean_data;

@end
</code></pre>

<p>In the above example the <code>speak</code> is an instance method, whereas <code>clean_data</code> is a class method.</p>

<h2>Models</h2>

<p>Define your models using custom classes, deriving, for example, from <code>NSObject</code>.</p>

<h2>Private Properties</h2>

<p>You can declare properties in the interface definition of your class but in the <code>.m</code> file. In that case,
the property becomes private, and it is only accessible in the implementation.</p>

<p>Example:</p>

<pre><code>@interface Person : NSObject
@end

@implementation Person

// +age+ is a private property
@property NSNumber *age;

@end
</code></pre>

<h2>Let a View display Dynamic Data</h2>

<p>It needs a <em>data source</em> and a <em>delegate</em>.</p>

<h2>Prototype Cells</h2>

<p>Take their data from the data source of the table view.</p>

<h1>Where do I go from here</h1>

<p>I definitely need to improve my Objective-C knowledge. I will <a href="https://www.codeschool.com/courses/try-objective-c">Try Objective-C</a>.</p>
]]></content>
  </entry>
  
</feed>
