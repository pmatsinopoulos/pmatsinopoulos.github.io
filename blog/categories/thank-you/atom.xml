<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Thank-you | Panos Matsinopoulos]]></title>
  <link href="http://pmatsinopoulos.github.io/blog/categories/thank-you/atom.xml" rel="self"/>
  <link href="http://pmatsinopoulos.github.io/"/>
  <updated>2024-09-27T20:08:24+03:00</updated>
  <id>http://pmatsinopoulos.github.io/</id>
  <author>
    <name><![CDATA[Panos Matsinopoulos]]></name>
    <email><![CDATA[panayotis@matsinopoulos.gr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arigatai; Express Gratitude That Stays in History]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2024/08/25/arigatai-express-gratitude-that-stays-in-history/"/>
    <updated>2024-08-25T15:38:43+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2024/08/25/arigatai-express-gratitude-that-stays-in-history</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>This is the idea behind <code>Arigatai</code>, a project that dreams to save the gratitude statements in
history.</p>

<!-- more -->


<h1>When I First Had The Idea for a <code>#thankyou</code> Slack Channel</h1>

<p>Back when I worked at <a href="https://www.getlavanda.com/">Lavanda</a>, I introduced the <code>#thankyou</code> Slack channel.</p>

<p>Why?</p>

<p>I wanted to express my gratitude to another colleague, <strong>in public</strong>.</p>

<p>Why?</p>

<p>I always sent my gratitude with a <em>thank you</em> message to the person having offered his time, knowledge and help, to make my life at work better&hellip;but I didn&rsquo;t want this to stay only between us.</p>

<ul>
<li><p>That person made me happy, and I wanted to show to the rest of the company <strong>that I was happy</strong>.</p></li>
<li><p>I also wanted to show to the rest of the company my happiness of <strong>having
colleagues who could make others happy</strong>.</p></li>
<li><p>I wanted to show to the rest of the company <strong>who is the person that can make others happy</strong>.</p></li>
<li><p>I believe that my colleagues who can make others happy, they deserve to be, at least, <strong>recognized in public</strong>.</p></li>
</ul>


<p>And, I wanted to make public, <strong>the reason I am thanking</strong> my colleague. Not many details. Brief short phrase to let anyone actually be in my shoes for the reason I am happy for. To give a little more context and value to this open gratitude.</p>

<p>Then, everyone went mad about it. They loved it.</p>

<p>And they even created a <em>thank you</em> counter. The <strong>tacos</strong>.</p>

<p>And they put some limits. Every day you can thank up to 5 times. You can give your 5 tacos to the same person, if you want, or give each one of the 5 to different. Doesn&rsquo;t matter, but you can only spend up to 5 tacos each day.</p>

<p>And they even have a leader board:</p>

<p><img src="../../../../../images/lavanda-tacos-leaderboard.jpg" alt="Lavanda Tacos Leader Board" /></p>

<p>So, employees, earned tacos on a daily basis. And they gave tacos to other colleagues too.</p>

<h1>Other Companies</h1>

<p>Is this a common practice in companies. I didn&rsquo;t know. Until I saw this:</p>

<p><a href="https://handbook.gitlab.com/handbook/values/#say-thanks">The Gitlab Handbook</a></p>

<p>Ohhh! They have a <code>#thanks</code> channel. Similar to the one I introduced at
Lavanda! I was so happy I saw that.</p>

<p>And then I also found this:</p>

<p><a href="https://heytaco.com/">Heytaco</a></p>

<p>A company that offers a <em>peer-to-peer recognition platform</em>. Great!</p>

<p>So, it make sense!</p>

<h1>The Problem</h1>

<blockquote><p>All tacos were deleted ðŸ˜­.</p>

<p>I left Lavanda, my tacos have gone away. I couldn&rsquo;t take my tacos with me ðŸ˜¢.</p></blockquote>

<p>I guess you immediately get the point.</p>

<p>The tacos, they presented a <em>value</em> to me, which</p>

<ul>
<li>I lose when I leave the company,</li>
<li>I lose when the centralized entity that keeps track of them stops to exist.</li>
</ul>


<p><em>So what</em> one might say!</p>

<p>I am saying that gratitude that I receive throughout my professional life should belong to me.</p>

<p>It is a value that I want to keep on having, forever, registered in history.</p>

<p>And I want to accumulate such value even, going from one company to the next.</p>

<p><strong>It is part of my reputation as a professional</strong>.</p>

<h1>The Solution</h1>

<p>Join <strong>Arigatai</strong>.</p>

<h2>ERC-20 Token</h2>

<p>Arigatai, with symbol <code>ARIG</code>, stores the gratitude value on Ethereum, as an <a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-20/">ERC-20 token</a>.</p>

<p><img src="../../../../../images/ARIGATAI-is-erc-20.png" alt="ARIGATAI is an ERC-20 Token" /></p>

<p><code>ARIG</code>, is my professional reputation points on the <em>gratitude</em> dimension.</p>

<h2>Minting</h2>

<p>When <code>Arigatai</code> Smart Contract is deployed it doesn&rsquo;t have any initial circulation. I.e. the circulating supply is <code>0</code>.</p>

<p>Minting starts when clients call the external functions <code>arigatoDeliver()</code> and <code>arigatoAccept()</code></p>

<p>This is the signature of the function:</p>

<pre><code>function arigatoDeliver(
  address _recipient, // The EOA that will receive the `ARIG`
  uint256 _amount, // The amount of `ARIG` the _recipient will get
  bytes[640] memory _reason, // The reason sender is sending the _recipient this amount of ARIG
) external;
</code></pre>

<p>There are some rules for this call to succeed.</p>

<ol>
<li>The caller should be an EOA, not a contract.</li>
<li>Recipient should be an EOA, not a contract.</li>
<li>The caller should not exceed the maximum daily delivery amount which is 5.</li>
</ol>


<p>This function does not actually <em>create</em> <code>ARIG</code>.  It is the <code>arigatoAccept()</code> that does.</p>

<pre><code>function arigatoAccept(
  address _sender, // The EOA that sent the arigatoRequest()
  uint256 _amount, // The amount of $ARIG that will be accepted
) external;
</code></pre>

<ol>
<li>The caller needs to have a pending <code>ARIG</code> delivery from the <code>_sender</code>.</li>
<li>The pending delivery should be for the <code>_amount</code>.</li>
<li>The delivery should have been created within the last 24 hours from acceptance.</li>
</ol>


<p>So, it is the <code>arigatoAccept()</code> that does the actual minting of the <code>ARIG</code> token.</p>

<p>When <code>arigatoAccept()</code> succeeds, the caller gets the amount of <code>ARIG</code> and there is
a record created (<code>Arigato</code> record) in the state of the contract to record the details of the reward.</p>

<p>The <code>arigatoAccept()</code> will internally call a <code>_mint()</code> function like:</p>

<pre><code>_mint(msg.sender, _amount)
</code></pre>

<p>and will also take care to create the <code>Arigato</code> record.</p>

<h2>Properties of the ERC-20 Token</h2>

<ul>
<li><code>name</code>: <code>ARIGATAI</code></li>
<li><code>symbol</code>:<code>ARIG</code></li>
<li><code>decimals</code>: <code>0</code>. The value <code>ARIG</code> token is not divisible.</li>
</ul>


<h2>How can an EOA Find The List of its <code>Arigato</code> Records?</h2>

<p>There is a function that allows pagination access to the <code>Arigato</code> records of an address:</p>

<pre><code>function getArigatos(address receiver, uint256 start, uint256 count) public view returns (Arigato[] memory);
</code></pre>

<p>Also, there is a function that returns the total number of <code>Arigato</code> records of an address:</p>

<pre><code>function getArigatosCount(address receiver) public view returns uint256;
</code></pre>

<h2>How can we have a Leader Board?</h2>

<p>Contract keeps track of the recipients and their <code>Arigato</code> records. Building a Leader Board,
is outside of the scope of the Smart Contract, but we have other plans for it.</p>
]]></content>
  </entry>
  
</feed>
