<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Panos Matsinopoulos]]></title>
  <link href="http://pmatsinopoulos.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://pmatsinopoulos.github.io/"/>
  <updated>2019-03-12T23:00:11+02:00</updated>
  <id>http://pmatsinopoulos.github.io/</id>
  <author>
    <name><![CDATA[Panos Matsinopoulos]]></name>
    <email><![CDATA[panayotis@matsinopoulos.gr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scraping a Web Page or Writing Automated System Tests Using Ruby]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2018/03/04/scraping-a-web-page-or-writing-automated-system-tests-using-ruby/"/>
    <updated>2018-03-04T09:33:36+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2018/03/04/scraping-a-web-page-or-writing-automated-system-tests-using-ruby</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Tech Career Booster</h2>

<p>Scraping a Web page or writing automated system tests is a very popular and much-needed skill in Web development. <a href="https://www.techcareerbooster.com/blog/scraping-a-web-page-or-writing-automated-system-tests-using-ruby?utm_source=pmatsinopoulos_blog&amp;utm_medium=new_blog_post&amp;utm_campaign=blog_post_scraping_automated_tests">Read my new blog post here</a>
in doing that using Ruby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functions as Arguments and Return Values - JavaScript vs Ruby]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2018/01/20/functions-as-arguments-and-return-values-javascript-vs-ruby/"/>
    <updated>2018-01-20T06:54:06+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2018/01/20/functions-as-arguments-and-return-values-javascript-vs-ruby</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Tech Career Booster</h2>

<p>This is a new blog post in Tech Career Booster. I am explaining how one can use functions as arguments and return values in
two very popular programming languages, JavaScript and Ruby.
<a href="https://www.techcareerbooster.com/blog/functions-as-arguments-and-return-values-javascript-vs-ruby?utm_source=pmatsinopoulos_blog&amp;utm_medium=new_blog_post&amp;utm_campaign=blog_post_function_arguments">Click here to visit it</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use ActiveRecord in Your Ruby Application]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2017/12/09/use-activerecord-in-your-ruby-application/"/>
    <updated>2017-12-09T09:17:00+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2017/12/09/use-activerecord-in-your-ruby-application</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Tech Career Booster</h2>

<p>This is a new blog post in Tech Career Booster blog. It has to do with using ActiveRecord in a Ruby application.
<a href="https://www.techcareerbooster.com/blog/use-activerecord-in-your-ruby-project?utm_source=pmatsinopoulos_blog&amp;utm_medium=new_blog_post&amp;utm_campaign=blog_post_use_active_record">Click here to visit it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Array Sum]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2015/07/19/ruby-array-sum/"/>
    <updated>2015-07-19T11:12:00+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2015/07/19/ruby-array-sum</id>
    <content type="html"><![CDATA[<p>This short post is going to demonstrate how we can sum an array of integers or an array of objects that have an
integer attribute.</p>

<p>Let&rsquo;s start:</p>

<!-- more -->


<h2>Sum array of integers</h2>

<h3>First version using reduce with block</h3>

<pre><code class="ruby">array_of_i = [10, 2, 8, 5, 7, 9]

sum = array_of_i.reduce(0) { |result, item| result + item }

puts "Sum of #{array_of_i.join(",")} is: #{sum}"
</code></pre>

<h3>Second version using reduce giving the method symbol to apply</h3>

<pre><code class="ruby">array_of_i = [10, 2, 8, 5, 7, 9]

sum = array_of_i.reduce(:+)

puts "Sum of #{array_of_i.join(",")} is: #{sum}"
</code></pre>

<h2>Sum of objects that have an integer attribute</h2>

<h3>Using reduce with a block</h3>

<pre><code class="ruby">class Product
  attr_accessor :price

  def initialize(price)
    self.price = price
  end  
end

prod1 = Product.new(1000)
prod2 = Product.new(500)
prod3 = Product.new(1500)

array_of_products = [prod1, prod2, prod3]

sum = array_of_products.reduce(0) {|result, item| result + item.price}

puts "Sum of array_of_products is: #{sum}"
</code></pre>

<p>I am pretty sure that you can come up with other methods of doing the above. Can you post in the comments any alternatives?
Advantages and disadvantages?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class vs Instance Variables]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2015/06/19/class-vs-instance-variables/"/>
    <updated>2015-06-19T08:54:00+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2015/06/19/class-vs-instance-variables</id>
    <content type="html"><![CDATA[<pre><code class="ruby demo of Class vs Instance variables"># Here, I am defining a class Dog with an class variable "@@number_of_feet"
# and an instance variable "@color", assuming that all dogs in the world
# have the same number of feet but they might differ in color. Or, at least,
# this is the general rule.
#
class Dog
  @@number_of_feet = 4

  def initialize(color)
    @color = color
  end

  def number_of_feet=(value)
    @@number_of_feet = value
  end

  def tell_me_about_you
    puts "My color is #{@color} and I have #{@@number_of_feet} feet"
  end
end

# The next two statements will set the "@color" instance variable to different values
# for max and rocky. But both dogs will have the same number of feet, which will be 4,
# since when class is initialized the "@@number_of_feet" instance variable takes the value 4.

max = Dog.new('black')
rocky = Dog.new('brown')

max.tell_me_about_you    # will print black and 4
rocky.tell_me_about_you  # will print brown and 4

# Now, I am changing the value of the class variable "@@number_of_feet" and I am setting that
# to "3". You will see that now all dogs change to have 3 feet.
max.number_of_feet = 3

max.tell_me_about_you    # will print black and 3
rocky.tell_me_about_you  # will print brown and 3
</code></pre>
]]></content>
  </entry>
  
</feed>
