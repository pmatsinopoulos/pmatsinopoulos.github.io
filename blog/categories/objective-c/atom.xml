<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-c | Panos Matsinopoulos]]></title>
  <link href="http://pmatsinopoulos.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://pmatsinopoulos.github.io/"/>
  <updated>2021-04-06T08:52:03+03:00</updated>
  <id>http://pmatsinopoulos.github.io/</id>
  <author>
    <name><![CDATA[Panos Matsinopoulos]]></name>
    <email><![CDATA[panayotis@matsinopoulos.gr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Audio Stream Basic Descriptions]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/04/06/audio-stream-basic-descriptions/"/>
    <updated>2021-04-06T08:50:32+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/04/06/audio-stream-basic-descriptions</id>
    <content type="html"><![CDATA[<p>Read my new article on <a href="https://medium.com/programming-for-music/audio-stream-basic-descriptions-e83484c2b53f">Audio Stream Basic Descriptions</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Raw Audio Samples]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/03/28/generating-raw-audio-samples/"/>
    <updated>2021-03-28T09:54:59+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/03/28/generating-raw-audio-samples</id>
    <content type="html"><![CDATA[<p>Read my new article on how to <a href="https://medium.com/programming-for-music/generating-raw-audio-samples-f08f3adf73af">Generate Raw Audio Samples</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Basic Info From a Local Audio File]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/03/18/reading-basic-info-from-a-local-audio-file/"/>
    <updated>2021-03-18T10:38:15+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/03/18/reading-basic-info-from-a-local-audio-file</id>
    <content type="html"><![CDATA[<p>Read my new article on how to <a href="https://medium.com/programming-for-music/reading-basic-info-from-a-local-audio-file-32206afe1386">Reading Basic Info From a Local Audio File</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Objective-C Application]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2020/11/21/my-first-objective-c-application/"/>
    <updated>2020-11-21T10:19:22+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2020/11/21/my-first-objective-c-application</id>
    <content type="html"><![CDATA[<p>Read my new article on how to create a simple Objective-C application: <a href="https://panosm.medium.com/my-first-objective-c-application-fbfc215b57f0">My First Objective-C Application</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Try Objective-C on Code School]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2015/08/17/try-objective-c-on-code-school/"/>
    <updated>2015-08-17T23:31:00+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2015/08/17/try-objective-c-on-code-school</id>
    <content type="html"><![CDATA[<p>Having done the Apple developer tutorial Getting Started on iOS development, the next was to have a deeper dive in
Objective-C. Looking around for online Objective-C tutorials, I came across a very good one, on <a href="https://www.codeschool.com">Code School</a>.
The tutorial is called <a href="http://tryobjectivec.codeschool.com/levels/1">Try Objective-C</a>.</p>

<!-- more -->


<h2>NSLog</h2>

<p><code>NSLog</code> method is used to log stuff on console.</p>

<h2><code>@</code> Prefix on Literal Values</h2>

<p><code>@"..."</code>: This is an <code>NSString *</code> literal.</p>

<h2>Store Numbers</h2>

<p><code>NSNumber *</code>: Useful object to store numbers.</p>

<p>Example:</p>

<pre><code>NSNumber *myAge = @44;
</code></pre>

<p>See how the literal on the right, has the <code>@</code> symbol prefix, necessary to assign to an <code>NS</code> object.</p>

<h2>Construct Arrays</h2>

<p>For arrays use <code>NSArray *</code></p>

<p>Example:</p>

<pre><code>NSArray *fruits = @[@"Apples", @"Oranges", @"Pears"];
</code></pre>

<p>Watch out the @ prefix both in front of array literal and in front of the string literals.</p>

<p>And access value of an item by position: fruits[0], fruits[1] e.t.c.</p>

<h2>Mutable Arrays</h2>

<p><code>NSArray</code> is immutable. So, you cannot change it. Use <code>NSMutableArray</code> if you want to create an array that
can be changed.</p>

<h2>Hashes and Dictionaries</h2>

<p>How to create hashes or dictionaries? Use the <code>NSDictionary *</code>.</p>

<p>Example:</p>

<pre><code>NSDictionary *person = @{@"First Name": @"Panos"};
</code></pre>

<p>We can access the values using the keys:</p>

<pre><code>person[@"First Name"]   
</code></pre>

<h2>Send message to an object:</h2>

<pre><code>[objectVar methodName];
</code></pre>

<h2>Method description</h2>

<p>Use method &ldquo;description&rdquo; to get a nice-to-read representation of an object:</p>

<pre><code>[objectVar description]
</code></pre>

<h2>Unsigned Integers</h2>

<p><code>NSUInteger</code> is a type to stored unsigned integers.</p>

<p>Example:</p>

<pre><code>NSUInteger = 5;
</code></pre>

<h2>Operations with NSNumbers</h2>

<p>This is not so straight forward. You can not just use the + operator, for example.
You need to get the <code>NSUInteger</code> version of the <code>NSNumber *</code> and then operate on that.</p>

<pre><code>NSNumber *first = @1;
NSNumber *second = @2;
NSUInteger uiFirst  = [first unsignedIntegerValue];
NSUInteger uiSecond = [second unsignedIntegerValue];
</code></pre>

<p>Then</p>

<pre><code>uiFirst + uiSecond
</code></pre>

<h2>Appending Strings</h2>

<p>This will not work: <code>@"foo" + @"bar"</code>.</p>

<p>But this will do:</p>

<pre><code>[@"foo " stringByAppendingString:@"bar"]
</code></pre>

<h2>Initialize String</h2>

<p>You can use <code>stringWithString:</code> to initialize a string.</p>

<p>Example:</p>

<pre><code>NSString *firstName = [NSString stringWithString:@"foo"];
</code></pre>

<h2>Alloc &amp; Init</h2>

<p>Create an <code>NSString</code> with <code>alloc</code> and <code>init</code>.</p>

<p>Examples:</p>

<pre><code>NSString *firstName = [[NSString alloc] initWithString:@"foo"];
</code></pre>

<h2>Comparing 2 NSStrings</h2>

<pre><code>[firstName isEqualToString:anotherFirstName]            
</code></pre>

<h2>Enumerate on Arrays</h2>

<p>Enumerate and work on each one of the items of an array:</p>

<p>Example:</p>

<pre><code> NSArray *fruits = @[@"Apples", @"Oranges", @"Pears"];
 for (NSString *fruit in fruits) {
   NSLog(fruit);
 }
</code></pre>

<h2>Code Blocks</h2>

<p>Code blocks work like anonymous functions or closures.</p>

<p>Here is an example of a block that takes arguments and returns value.</p>

<pre><code>NSString * (^sayHello)(NSString *) = ^(NSString *name){
  [NSString stringWithFormat: @"Hello %@", name];
};
</code></pre>

<h2>Enumerate using blocks</h2>

<p>You can send a whole block as an argument to an enumeration
and have the block applied to each one of the elements.</p>

<pre><code>NSArray *funnyWords = @[@"Goobly", @"Blobie", @"Fnogie"];
[funnyWords enumerateObjectsUsingBlock: 
    ^(NSString *word, NSUInteger index, BOOL *stop) {
       NSLog(@"%@ is a funny word", word);
    }
];
</code></pre>

<h2>Defining Class Properties</h2>

<p>This is an example of defining class properties.</p>

<p>Example:</p>

<pre><code>@interface Person : NSObject

@property NSString *firstName;
@property NSString *lastName;

@end        
</code></pre>

<p>The above creates 2 public properties. And 4 methods.
2 setters and 2 getters. One setter to set firstName
and one setter to set lastName. One getter to get firstName
and one getter to get lastName. Also, it creates a class
instance variable with name &ldquo;<em>firstName&rdquo; and another one
with name &ldquo;</em>lastName&rdquo; that one can access directly from the
implementation code of the class. However, clients of the class
cannot access them.</p>

<h2>Public Methods</h2>

<p>When you want to declare the public behaviour of a class you declare       <br/>
it on the interface level</p>

<pre><code>@interface Person : NSObject

-(void)sayHello;

@end
</code></pre>

<p>and you implement that on the implementation file, e.g. in <code>Person.m</code></p>

<pre><code>@implementation Person

-(void)sayHello {
   NSLog(@"Hello");
}
end
</code></pre>

<p>Then when you want to call that method, you send the message to the object instance:</p>

<pre><code>Person *p = [[Person alloc] init];
[p sayHello];
</code></pre>

<h2>Method with arguments</h2>

<p>When a method takes arguments, then we are using <code>:</code> to separate the method name from the
argument definition:</p>

<pre><code>@interface Person : NSObject

-(NSString *)speak:(NSString *)greeting;

@end    
</code></pre>

<p>Or when it takes 2 arguments, for example &ldquo;greeting&rdquo; and &ldquo;times&rdquo;:</p>

<pre><code>-(NSString *)speak:(NSString *) greeting soManyTimes:(NSNumber *)times;
</code></pre>

<p>The method name now is <code>speak:soManyTimes:</code></p>

<p>From the number of colons inside the name we can tell how many arguments
it requires when called.</p>

<p>You can make a property readonly as follows:</p>

<pre><code>@interface Person : NSObject

@property (readonly) NSNumber *salary;

@end
</code></pre>

<h2>Overriding Default Object Constructor</h2>

<p>The default object constructor is <code>init</code>. We can override that
in the implementation of the class.</p>

<pre><code>@implementation Person

-(Person *)init {
  _salary = @18;
  return [super init];
}

@end
</code></pre>

<p>Calling <code>return [super init];</code> is usually necessary in order
to make sure that the Person is correctly constructed as an NSObject.</p>

<h2>Instance Variables</h2>

<p>Instance variables are declared in the interface.</p>

<pre><code>@interface Coffee : NSObject {
  NSNumber *_temperature;
}
@end    
</code></pre>

<h2>Check whether object responds to a method</h2>

<p>We can check whether an object responds to a method at run-time
using the <code>respondsToSelector:</code> method</p>

<p>Example:</p>

<pre><code>if ([coffee respondToSelector:@selector(brew)]) {
  NSLog(@"Coffee responds to brew message");
}
</code></pre>

<h2>Protocols</h2>

<p>Protocols are sets of methods that need to be implemented by a class.
Which protocols a class needs to implement is declared in the interface
of the class. Example:</p>

<pre><code>@interface Person : NSObject &lt;NSCopying&gt;
@end
</code></pre>

<p>Person class derives from <code>NSObject</code> and also implements the protocol <code>NSCopying</code>.</p>

<p>Whereas standard constructor/initializer is the <code>init</code> method, one can
declare custom initializers. These are methods that have a name that
starts with <code>init</code>.</p>

<p>Example:</p>

<pre><code>@interface Person : NSObject

-(Person *) initWithFirstName:(NSString *)firstName
                     lastName:(NSString *)lastName;

@end        
</code></pre>

<p>and then in the implementation you can assign the arguments to properties or
instance variables.</p>

<p>When you instantiate the object you can call:</p>

<pre><code>Person *p = [[Person alloc] initWithFirstName:@"First" lastName:@"Last"];
</code></pre>

<h2>Object instance responds to class</h2>

<p>An object instance responds to <code>class</code> which returns the class of the object.
This can be used, for example, to dynamically instantiate an object.</p>

<pre><code>[[[objectVar class] alloc] init];
</code></pre>

<p>without knowing the actual class of the object instance.</p>

<p>Use the special type <code>id</code> instead of <code>NSObject *</code> for when you have
a generic Objective-C object that you don&rsquo;t know the type of at
compile time.</p>

<h2>What&rsquo;s Next from Here ##</h2>

<p>I will go to <a href="http://www.binpress.com/tutorial/learn-objectivec-in-24-days/38">Learn Objective-C in 24 Days</a>.
But first, I may take a short break to work with <code>Swift</code>. It seems that it may be more Ruby-like language.</p>
]]></content>
  </entry>
  
</feed>
