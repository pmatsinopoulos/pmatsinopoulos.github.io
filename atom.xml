<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Panos Matsinopoulos]]></title>
  <link href="http://pmatsinopoulos.github.io/atom.xml" rel="self"/>
  <link href="http://pmatsinopoulos.github.io/"/>
  <updated>2021-04-06T08:52:03+03:00</updated>
  <id>http://pmatsinopoulos.github.io/</id>
  <author>
    <name><![CDATA[Panos Matsinopoulos]]></name>
    <email><![CDATA[panayotis@matsinopoulos.gr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Audio Stream Basic Descriptions]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/04/06/audio-stream-basic-descriptions/"/>
    <updated>2021-04-06T08:50:32+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/04/06/audio-stream-basic-descriptions</id>
    <content type="html"><![CDATA[<p>Read my new article on <a href="https://medium.com/programming-for-music/audio-stream-basic-descriptions-e83484c2b53f">Audio Stream Basic Descriptions</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Raw Audio Samples]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/03/28/generating-raw-audio-samples/"/>
    <updated>2021-03-28T09:54:59+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/03/28/generating-raw-audio-samples</id>
    <content type="html"><![CDATA[<p>Read my new article on how to <a href="https://medium.com/programming-for-music/generating-raw-audio-samples-f08f3adf73af">Generate Raw Audio Samples</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Basic Info From a Local Audio File]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/03/18/reading-basic-info-from-a-local-audio-file/"/>
    <updated>2021-03-18T10:38:15+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/03/18/reading-basic-info-from-a-local-audio-file</id>
    <content type="html"><![CDATA[<p>Read my new article on how to <a href="https://medium.com/programming-for-music/reading-basic-info-from-a-local-audio-file-32206afe1386">Reading Basic Info From a Local Audio File</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Input Notes to MuseScore With VMPK]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/03/16/input-notes-to-musescore-with-vmpk/"/>
    <updated>2021-03-16T10:12:26+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/03/16/input-notes-to-musescore-with-vmpk</id>
    <content type="html"><![CDATA[<p>My new blog post in &ldquo;Programming for Music&rdquo; publication: <a href="https://medium.com/programming-for-music/input-notes-to-musescore-with-vmpk-aa04e8774b0f">Input Notes to MuseScore with VMPK</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Event-Driven Architecture Demo]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/03/07/event-driven-architecture-demo/"/>
    <updated>2021-03-07T13:00:23+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/03/07/event-driven-architecture-demo</id>
    <content type="html"><![CDATA[<p>Read my new article about an <a href="https://panosm.medium.com/event-driven-architecture-demo-29f5649144b7">event-driven architecture demo</a> that I have built.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby and Trusting Young People]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/02/19/ruby-and-trusting-young-people/"/>
    <updated>2021-02-19T08:25:32+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/02/19/ruby-and-trusting-young-people</id>
    <content type="html"><![CDATA[<p>Read my new article on how to <a href="https://panosm.medium.com/ruby-and-trusting-young-people-a18b6394f808">Ruby and Trusting Young People</a> changed my life for better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Exception Hierarchy Best Practices]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/02/18/custom-exception-hierarchy-best-practices/"/>
    <updated>2021-02-18T14:32:25+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/02/18/custom-exception-hierarchy-best-practices</id>
    <content type="html"><![CDATA[<p>Read my new article on <a href="https://getlavanda.com/engineering/2021-02-18-custom-exception-hierarchy-best-practices">Custom Exception Hierarchy Best Practices</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hanami vs Ruby on Rails]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2020/11/21/hanami-vs-ruby-on-rails/"/>
    <updated>2020-11-21T10:21:08+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2020/11/21/hanami-vs-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>Read my new article: <a href="https://getlavanda.com/engineering/2020-10-30-hanami-vs-ruby-on-rails">Hanami vs Ruby on Rails</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Objective-C Application]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2020/11/21/my-first-objective-c-application/"/>
    <updated>2020-11-21T10:19:22+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2020/11/21/my-first-objective-c-application</id>
    <content type="html"><![CDATA[<p>Read my new article on how to create a simple Objective-C application: <a href="https://panosm.medium.com/my-first-objective-c-application-fbfc215b57f0">My First Objective-C Application</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Embedded Ruby as a Template Language]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2020/07/05/use-embedded-ruby-as-a-template-language/"/>
    <updated>2020-07-05T19:00:12+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2020/07/05/use-embedded-ruby-as-a-template-language</id>
    <content type="html"><![CDATA[<p>Read my new article on how to <a href="https://levelup.gitconnected.com/use-embedded-ruby-as-a-template-language-85a85202f26f">Use Embedded Ruby as a Template Language</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying a Zookeeper Ensemble on AWS]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2019/05/25/deploying-a-zookeeper-ensemble-on-aws/"/>
    <updated>2019-05-25T19:35:09+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2019/05/25/deploying-a-zookeeper-ensemble-on-aws</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Tech Career Booster - Zookeeper Ensemble Deployment on AWS</h2>

<p>This is a new blog post in Tech Career Booster blog. It has to do with deploying Zookeeper on AWS.
<a href="https://www.techcareerbooster.com/blog/deploying-a-zookeeper-ensemble-on-aws">Click here to visit it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Your Own Schema Registry Server Using Python and Django]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2019/03/12/build-your-own-schema-registry-server-using-python-and-django/"/>
    <updated>2019-03-12T22:55:57+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2019/03/12/build-your-own-schema-registry-server-using-python-and-django</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Tech Career Booster</h2>

<p>This is a new blog post in Tech Career Booster blog. It has to do with implementing a JSON Validator and Schema Registry
server using Python and Django.
<a href="https://www.techcareerbooster.com/blog/build-your-own-schema-registry-server-using-python-and-django">Click here to visit it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scraping a Web Page or Writing Automated System Tests Using Ruby]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2018/03/04/scraping-a-web-page-or-writing-automated-system-tests-using-ruby/"/>
    <updated>2018-03-04T09:33:36+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2018/03/04/scraping-a-web-page-or-writing-automated-system-tests-using-ruby</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Tech Career Booster</h2>

<p>Scraping a Web page or writing automated system tests is a very popular and much-needed skill in Web development. <a href="https://www.techcareerbooster.com/blog/scraping-a-web-page-or-writing-automated-system-tests-using-ruby?utm_source=pmatsinopoulos_blog&amp;utm_medium=new_blog_post&amp;utm_campaign=blog_post_scraping_automated_tests">Read my new blog post here</a>
in doing that using Ruby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Have the Values, Have the Guts]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2018/01/27/have-the-values-have-the-guts/"/>
    <updated>2018-01-27T07:40:21+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2018/01/27/have-the-values-have-the-guts</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Codementor</h2>

<p>This is my new blog post in Codementor. I am talking about the values you need to develop in order to start being
confident with your customers. <a href="https://www.codementor.io/panosmatsinopoulos/have-the-values-have-the-guts-fwixxfk02">Click here to read it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functions as Arguments and Return Values - JavaScript vs Ruby]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2018/01/20/functions-as-arguments-and-return-values-javascript-vs-ruby/"/>
    <updated>2018-01-20T06:54:06+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2018/01/20/functions-as-arguments-and-return-values-javascript-vs-ruby</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Tech Career Booster</h2>

<p>This is a new blog post in Tech Career Booster. I am explaining how one can use functions as arguments and return values in
two very popular programming languages, JavaScript and Ruby.
<a href="https://www.techcareerbooster.com/blog/functions-as-arguments-and-return-values-javascript-vs-ruby?utm_source=pmatsinopoulos_blog&amp;utm_medium=new_blog_post&amp;utm_campaign=blog_post_function_arguments">Click here to visit it</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use ActiveRecord in Your Ruby Application]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2017/12/09/use-activerecord-in-your-ruby-application/"/>
    <updated>2017-12-09T09:17:00+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2017/12/09/use-activerecord-in-your-ruby-application</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Tech Career Booster</h2>

<p>This is a new blog post in Tech Career Booster blog. It has to do with using ActiveRecord in a Ruby application.
<a href="https://www.techcareerbooster.com/blog/use-activerecord-in-your-ruby-project?utm_source=pmatsinopoulos_blog&amp;utm_medium=new_blog_post&amp;utm_campaign=blog_post_use_active_record">Click here to visit it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Rails Logger Use One Log File Per Process With Phusion Passenger]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2016/02/19/making-rails-logger-use-one-log-file-per-process-with-phusion-passenger/"/>
    <updated>2016-02-19T16:57:00+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2016/02/19/making-rails-logger-use-one-log-file-per-process-with-phusion-passenger</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Today, I had to find a way to make my production Rails application log into different log files per process. I have
the application deployed using <a href="https://www.phusionpassenger.com/">Phusion Passenger</a> as an Apache 2 module. The reason
I decided to do that was the fact that I wanted to analyze the logs with <a href="https://github.com/wvanbergen/request-log-analyzer">Request Log Analyzer</a> tool.
This tool requires the log files to be separate so that they do not interleave the log entries of different requests.</p>

<!-- more -->


<h2>Blog Sponsor</h2>

<p>This post is sponsored by <a href="http://www.fraudpointer.com/">Fraudpointer</a>.</p>

<h2>References</h2>

<p>In order to solve that I was helped by what I found about the similar problem solved for Unicorn processes here:</p>

<p><a href="http://jordan.broughs.net/archives/2014/09/provide-separate-rails-log-files-for-each-unicorn-worker">A blog about how one can have different log file per Unicorn worker</a></p>

<p>Then, I had to google about how I could hook to after fork events on Phusion Passenger. There was a very good <a href="http://stackoverflow.com/q/24180809/658469">question here</a>
and its <a href="http://stackoverflow.com/a/24188716/658469">answer here</a>. The answer directed me also on Phusion Passenger documentation for
<a href="https://www.phusionpassenger.com/library/indepth/ruby/spawn_methods/#smart-spawning-hooks">hooking on spawning events</a>.</p>

<h2>Implementation</h2>

<p>I have created an initializer with the following content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">production?</span> <span class="o">&amp;&amp;</span> <span class="n">defined?</span><span class="p">(</span><span class="no">PhusionPassenger</span><span class="p">)</span>
</span><span class='line'>    <span class="no">PhusionPassenger</span><span class="o">.</span><span class="n">on_event</span><span class="p">(</span><span class="ss">:starting_worker_process</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">forked</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># get access to log device</span>
</span><span class='line'>      <span class="k">if</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:VERSION</span><span class="o">::</span><span class="no">STRING</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;4.&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">logdev</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@logdev</span><span class="p">)</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:VERSION</span><span class="o">::</span><span class="no">STRING</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;3.2&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">logdev</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@logger</span><span class="p">)</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@log</span><span class="p">)</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@logdev</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># logdev.dev is a File instance that is the open file to log file.</span>
</span><span class='line'>      <span class="c1"># Get the extension and prepend the process id.</span>
</span><span class='line'>      <span class="n">ext</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">logdev</span><span class="o">.</span><span class="n">dev</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">pid</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">pid</span>
</span><span class='line'>      <span class="n">path</span> <span class="o">=</span> <span class="n">logdev</span><span class="o">.</span><span class="n">dev</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">gsub</span> <span class="sr">/</span><span class="si">#{</span><span class="no">Regexp</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">ext</span><span class="p">)</span><span class="si">}</span><span class="sr">$/</span><span class="p">,</span> <span class="s2">&quot;.</span><span class="si">#{</span><span class="n">pid</span><span class="si">}#{</span><span class="n">ext</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># open the new file</span>
</span><span class='line'>      <span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">file</span><span class="o">.</span><span class="n">binmode</span>
</span><span class='line'>      <span class="n">file</span><span class="o">.</span><span class="n">sync</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># We flush and close the current file handle, the one that writes to the single file.</span>
</span><span class='line'>      <span class="n">logdev</span><span class="o">.</span><span class="n">dev</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'>      <span class="n">logdev</span><span class="o">.</span><span class="n">dev</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># We replace the file handle with the new one +file+ that refers to process specific file.</span>
</span><span class='line'>      <span class="n">logdev</span><span class="o">.</span><span class="n">instance_variable_set</span><span class="p">(</span><span class="ss">:@dev</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="n">ex</span><span class="o">.</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="n">ex</span><span class="o">.</span><span class="n">backtrace</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Closing</h2>

<p>This has been implemented for a Rails 3.2 and a Rails 4.2 application.</p>

<p>Any feedback from you would be much appreciated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Try Objective-C on Code School]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2015/08/17/try-objective-c-on-code-school/"/>
    <updated>2015-08-17T23:31:00+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2015/08/17/try-objective-c-on-code-school</id>
    <content type="html"><![CDATA[<p>Having done the Apple developer tutorial Getting Started on iOS development, the next was to have a deeper dive in
Objective-C. Looking around for online Objective-C tutorials, I came across a very good one, on <a href="https://www.codeschool.com">Code School</a>.
The tutorial is called <a href="http://tryobjectivec.codeschool.com/levels/1">Try Objective-C</a>.</p>

<!-- more -->


<h2>NSLog</h2>

<p><code>NSLog</code> method is used to log stuff on console.</p>

<h2><code>@</code> Prefix on Literal Values</h2>

<p><code>@"..."</code>: This is an <code>NSString *</code> literal.</p>

<h2>Store Numbers</h2>

<p><code>NSNumber *</code>: Useful object to store numbers.</p>

<p>Example:</p>

<pre><code>NSNumber *myAge = @44;
</code></pre>

<p>See how the literal on the right, has the <code>@</code> symbol prefix, necessary to assign to an <code>NS</code> object.</p>

<h2>Construct Arrays</h2>

<p>For arrays use <code>NSArray *</code></p>

<p>Example:</p>

<pre><code>NSArray *fruits = @[@"Apples", @"Oranges", @"Pears"];
</code></pre>

<p>Watch out the @ prefix both in front of array literal and in front of the string literals.</p>

<p>And access value of an item by position: fruits[0], fruits[1] e.t.c.</p>

<h2>Mutable Arrays</h2>

<p><code>NSArray</code> is immutable. So, you cannot change it. Use <code>NSMutableArray</code> if you want to create an array that
can be changed.</p>

<h2>Hashes and Dictionaries</h2>

<p>How to create hashes or dictionaries? Use the <code>NSDictionary *</code>.</p>

<p>Example:</p>

<pre><code>NSDictionary *person = @{@"First Name": @"Panos"};
</code></pre>

<p>We can access the values using the keys:</p>

<pre><code>person[@"First Name"]   
</code></pre>

<h2>Send message to an object:</h2>

<pre><code>[objectVar methodName];
</code></pre>

<h2>Method description</h2>

<p>Use method &ldquo;description&rdquo; to get a nice-to-read representation of an object:</p>

<pre><code>[objectVar description]
</code></pre>

<h2>Unsigned Integers</h2>

<p><code>NSUInteger</code> is a type to stored unsigned integers.</p>

<p>Example:</p>

<pre><code>NSUInteger = 5;
</code></pre>

<h2>Operations with NSNumbers</h2>

<p>This is not so straight forward. You can not just use the + operator, for example.
You need to get the <code>NSUInteger</code> version of the <code>NSNumber *</code> and then operate on that.</p>

<pre><code>NSNumber *first = @1;
NSNumber *second = @2;
NSUInteger uiFirst  = [first unsignedIntegerValue];
NSUInteger uiSecond = [second unsignedIntegerValue];
</code></pre>

<p>Then</p>

<pre><code>uiFirst + uiSecond
</code></pre>

<h2>Appending Strings</h2>

<p>This will not work: <code>@"foo" + @"bar"</code>.</p>

<p>But this will do:</p>

<pre><code>[@"foo " stringByAppendingString:@"bar"]
</code></pre>

<h2>Initialize String</h2>

<p>You can use <code>stringWithString:</code> to initialize a string.</p>

<p>Example:</p>

<pre><code>NSString *firstName = [NSString stringWithString:@"foo"];
</code></pre>

<h2>Alloc &amp; Init</h2>

<p>Create an <code>NSString</code> with <code>alloc</code> and <code>init</code>.</p>

<p>Examples:</p>

<pre><code>NSString *firstName = [[NSString alloc] initWithString:@"foo"];
</code></pre>

<h2>Comparing 2 NSStrings</h2>

<pre><code>[firstName isEqualToString:anotherFirstName]            
</code></pre>

<h2>Enumerate on Arrays</h2>

<p>Enumerate and work on each one of the items of an array:</p>

<p>Example:</p>

<pre><code> NSArray *fruits = @[@"Apples", @"Oranges", @"Pears"];
 for (NSString *fruit in fruits) {
   NSLog(fruit);
 }
</code></pre>

<h2>Code Blocks</h2>

<p>Code blocks work like anonymous functions or closures.</p>

<p>Here is an example of a block that takes arguments and returns value.</p>

<pre><code>NSString * (^sayHello)(NSString *) = ^(NSString *name){
  [NSString stringWithFormat: @"Hello %@", name];
};
</code></pre>

<h2>Enumerate using blocks</h2>

<p>You can send a whole block as an argument to an enumeration
and have the block applied to each one of the elements.</p>

<pre><code>NSArray *funnyWords = @[@"Goobly", @"Blobie", @"Fnogie"];
[funnyWords enumerateObjectsUsingBlock: 
    ^(NSString *word, NSUInteger index, BOOL *stop) {
       NSLog(@"%@ is a funny word", word);
    }
];
</code></pre>

<h2>Defining Class Properties</h2>

<p>This is an example of defining class properties.</p>

<p>Example:</p>

<pre><code>@interface Person : NSObject

@property NSString *firstName;
@property NSString *lastName;

@end        
</code></pre>

<p>The above creates 2 public properties. And 4 methods.
2 setters and 2 getters. One setter to set firstName
and one setter to set lastName. One getter to get firstName
and one getter to get lastName. Also, it creates a class
instance variable with name &ldquo;<em>firstName&rdquo; and another one
with name &ldquo;</em>lastName&rdquo; that one can access directly from the
implementation code of the class. However, clients of the class
cannot access them.</p>

<h2>Public Methods</h2>

<p>When you want to declare the public behaviour of a class you declare       <br/>
it on the interface level</p>

<pre><code>@interface Person : NSObject

-(void)sayHello;

@end
</code></pre>

<p>and you implement that on the implementation file, e.g. in <code>Person.m</code></p>

<pre><code>@implementation Person

-(void)sayHello {
   NSLog(@"Hello");
}
end
</code></pre>

<p>Then when you want to call that method, you send the message to the object instance:</p>

<pre><code>Person *p = [[Person alloc] init];
[p sayHello];
</code></pre>

<h2>Method with arguments</h2>

<p>When a method takes arguments, then we are using <code>:</code> to separate the method name from the
argument definition:</p>

<pre><code>@interface Person : NSObject

-(NSString *)speak:(NSString *)greeting;

@end    
</code></pre>

<p>Or when it takes 2 arguments, for example &ldquo;greeting&rdquo; and &ldquo;times&rdquo;:</p>

<pre><code>-(NSString *)speak:(NSString *) greeting soManyTimes:(NSNumber *)times;
</code></pre>

<p>The method name now is <code>speak:soManyTimes:</code></p>

<p>From the number of colons inside the name we can tell how many arguments
it requires when called.</p>

<p>You can make a property readonly as follows:</p>

<pre><code>@interface Person : NSObject

@property (readonly) NSNumber *salary;

@end
</code></pre>

<h2>Overriding Default Object Constructor</h2>

<p>The default object constructor is <code>init</code>. We can override that
in the implementation of the class.</p>

<pre><code>@implementation Person

-(Person *)init {
  _salary = @18;
  return [super init];
}

@end
</code></pre>

<p>Calling <code>return [super init];</code> is usually necessary in order
to make sure that the Person is correctly constructed as an NSObject.</p>

<h2>Instance Variables</h2>

<p>Instance variables are declared in the interface.</p>

<pre><code>@interface Coffee : NSObject {
  NSNumber *_temperature;
}
@end    
</code></pre>

<h2>Check whether object responds to a method</h2>

<p>We can check whether an object responds to a method at run-time
using the <code>respondsToSelector:</code> method</p>

<p>Example:</p>

<pre><code>if ([coffee respondToSelector:@selector(brew)]) {
  NSLog(@"Coffee responds to brew message");
}
</code></pre>

<h2>Protocols</h2>

<p>Protocols are sets of methods that need to be implemented by a class.
Which protocols a class needs to implement is declared in the interface
of the class. Example:</p>

<pre><code>@interface Person : NSObject &lt;NSCopying&gt;
@end
</code></pre>

<p>Person class derives from <code>NSObject</code> and also implements the protocol <code>NSCopying</code>.</p>

<p>Whereas standard constructor/initializer is the <code>init</code> method, one can
declare custom initializers. These are methods that have a name that
starts with <code>init</code>.</p>

<p>Example:</p>

<pre><code>@interface Person : NSObject

-(Person *) initWithFirstName:(NSString *)firstName
                     lastName:(NSString *)lastName;

@end        
</code></pre>

<p>and then in the implementation you can assign the arguments to properties or
instance variables.</p>

<p>When you instantiate the object you can call:</p>

<pre><code>Person *p = [[Person alloc] initWithFirstName:@"First" lastName:@"Last"];
</code></pre>

<h2>Object instance responds to class</h2>

<p>An object instance responds to <code>class</code> which returns the class of the object.
This can be used, for example, to dynamically instantiate an object.</p>

<pre><code>[[[objectVar class] alloc] init];
</code></pre>

<p>without knowing the actual class of the object instance.</p>

<p>Use the special type <code>id</code> instead of <code>NSObject *</code> for when you have
a generic Objective-C object that you don&rsquo;t know the type of at
compile time.</p>

<h2>What&rsquo;s Next from Here ##</h2>

<p>I will go to <a href="http://www.binpress.com/tutorial/learn-objectivec-in-24-days/38">Learn Objective-C in 24 Days</a>.
But first, I may take a short break to work with <code>Swift</code>. It seems that it may be more Ruby-like language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First iOS App]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2015/08/14/my-first-ios-app/"/>
    <updated>2015-08-14T07:40:00+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2015/08/14/my-first-ios-app</id>
    <content type="html"><![CDATA[<p>This is my first encounter with iOS apps and Objective C. I followed the whole tutorial which is given <a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/index.html#//apple_ref/doc/uid/TP40011343-CH2-SW1">here</a>.
I am a Ruby developer and I decided to take this trip to iOS development because it is necessary for my work. I am offering professional services to <a href="https://www.bookandtable.com">Book&amp;Table</a>, which
is sponsoring me writing this blog post.</p>

<p>Following this tutorial, I had to keep some notes. Here are the most important ones. Maybe you will find them useful too. But most importantly, I am seeking feedback from experienced
iOS developers.</p>

<!-- more -->


<p>You can find the source code of the small application <a href="https://github.com/pmatsinopoulos/todo-obj-c">here</a></p>

<h2>Setup your Dev Env</h2>

<p>The tutorial explains very well how to setup your development environment. And your development environment comes for free with XCode and iOS SDK.
There are tools that contain everything and the UI is rich, with integrated debugger and tools to do graphical programming and design of your
app.</p>

<h2>I do not know Objective-C</h2>

<p>Although I have built lots of programs in C, I have never built one in Objective-C. So, the tutorial does an introduction to this language.</p>

<h3>Calling a method on a object</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[someObjectInstance someMethodName]</span></code></pre></td></tr></table></div></figure>


<h2>Application Templates</h2>

<p>XCode offers you the ability to start a project using an application template. The tutorial works with the <code>Single View Application</code> template.
I suppose that when I will get more familiar with XCode and Objective-C I will be able to use other templates too.</p>

<h2>Run Simulator</h2>

<p>This is fantastic. You can run a simulator from within XCode and see how your application would look like in various devices. Tutorial explains how to do that.</p>

<h2>main.m</h2>

<p>Cool. Like in C, there is a file that contains the <code>main</code> function. The Objective-C files that contain the implementation (rather than the interface) have
an extension that ends with <code>.m</code> (rather than with <code>.c</code> or <code>.cpp</code>).</p>

<h2>Application &amp; AppDelegate</h2>

<p>There are two objects that work together in order for the app to work. The application object and the app delegate object. The application object calls
specific methods on app delegate object and allows app delegate object to customize the app behaviour.</p>

<p>The app delegate object is defined in <code>AppDelegate.h</code> and implemented in <code>AppDelegate.m</code> file.</p>

<p>Reading the method names and the comments of the <code>AppDelegate.m</code> file, I understand that an application follows a life cycle through the following states:</p>

<ul>
<li>launch -> active</li>
<li>active -> inactive     Goes to inactive, when for example an incoming call is intercepted.</li>
<li>inactive -> background When the user quits, the application might go to background state instead of being terminated.</li>
<li>background -> inactive When the application goes back from background to inactive</li>
<li>inactive -> active</li>
<li>terminated When the application terminates</li>
</ul>


<h2>Storyboard</h2>

<p>There is a tool that helps you design the flow of your application. This is the storyboard. Your application is going to be
comprised of various stories each one linked to another. This will be the application flow.</p>

<h2>The Canvas and Adaptive Interface</h2>

<p>The canvas that is used to design your stories does not have the size of a specific iOS device. It is generic. You are responsible
to make your application being adaptive. And the tutorial does an introduction on the adaptive app design. It teaches you how to use
the Auto Layout feature that helps you position your elements in such a way that they will be looking good on all iOS devices.</p>

<h2>Object Library</h2>

<p>While you are doing the UI design of your app, you can use the Object Library that contains a big list of visual, and other items,
ready for you to use in order to build your app interface.</p>

<h2>Model View Controller</h2>

<p>The application design uses the MVC (Model View Controller) architecture.</p>

<h2>Views</h2>

<p>All the visual elements that you put on an application &ldquo;page&rdquo; are called <code>views</code>. So, for example, an input text field is a view.
However, the views can contain other views and you can have a view hierarchy.</p>

<p>At the top of the view hierarchy is the <code>window</code> object (look at file <code>AppDelegate.h</code>).</p>

<p>The <code>UIKit</code> framework provides many different views ready for you to use in order to let your users interact with your application.
All the views are classes of <code>UIView</code> class. You can customize and create your own views by subclassing this class.</p>

<h2>Storyboards</h2>

<p>You use storyboards to design the interface of your app. The <code>Main.storyboard</code> is the one that is automatically created for you by
XCode project wizard, when you chose the simple view application template.</p>

<h2>Scenes</h2>

<p>Each storyboard is composed of scenes. Can I think about scenes like I think about web pages when I build a Web application? I guess
so. The scene has its own view hierarchy. Like a page has a list/tree of HTML tags that are used to render the page.</p>

<h2>Inspector Pane</h2>

<p>This is used to configure the views. So, you select a view and then you use Inspector Pane on the right to configure the properties
of the view.</p>

<h2>View Controllers</h2>

<p>These implement the application behaviour. Events go from views to view controllers which then inform data model layer and then
the other way around. View controllers can be thought of as Controllers in Ruby on Rails. The view controller is an instance of <code>UIViewController</code> class.</p>

<p>A view controller manages a single view hierarchy. And usually, you create a custom <code>UIViewController</code> class in order to manage it.</p>

<h2>Navigation Controller</h2>

<p>This is a specialized view controller that is used to navigate from one view hierarchy to another. In other words from one page to
another. You can think about the navigation controller like a top navigation bar that you may have put into a layout file in your Rails application.
The set of view controller managed by a particular navigation controller is called the navigation stack.</p>

<p>Note that navigation controller, besides managing the transition from one view controller to another, it is responsible for presenting custom
views that belong to its own hierarchy.</p>

<p>Embed your first view controller into a navigation controller, by selecting the view controller and then selecting &ldquo;Editor > Embed In > Navigation Controller&rdquo;.
This will create a new navigation controller that has as root view controller the one embedded.</p>

<h2>Segue</h2>

<p>The segue is a transition from one view controller to another. There are actually various types of segues that can be used to
link one view controller to another.</p>

<ul>
<li>Show</li>
<li>Show detail</li>
<li>Present modally</li>
<li>Popover presentation</li>
<li>Custom</li>
<li>Unwind</li>
</ul>


<p>Because a <em>segue</em> is an object that holds the transition from one view controller to another, it is aware of both the source view controller
and the destination view controller.</p>

<h2>The Storyboard Entry Point</h2>

<p>This is an arrow in your storyboard editor that tells which scene is the one that should be presented first when the app starts.</p>

<h2>Modal View Controller</h2>

<p>The modal view controller is created when the segue that takes you to the view controller is of modal mode. The modal view controller
does not get a navigation bar because it is not added to the navigation stack. In that case, you may want to embed the modal view controller
it its own navigation controller.</p>

<h2>Customized View Controllers</h2>

<p>You need to create files (<code>*.h</code> and <code>*.m</code>) that define a class that derives from standard view controller classes. Then you need to use the
inspector editor to define that your scene is using the particular customized view controller.</p>

<h2>Exit From Scene</h2>

<p>You can exit from a scene as follows. You ctrl click on the navigation bar item that you want to be used for exit and your drag and drop it
on the &ldquo;Exit&rdquo; icon on top of the scene design area. Then you specify which method to call. You should have defined the method to call before
doing this. That method is an <code>IBAction</code> and when you do the drag and drop a list with the <code>IBActions</code> are presented for you to select.</p>

<h2>Foundation Framework</h2>

<p>This is one of the most basic and most important frameworks that Objective-C offers.
Includes:</p>

<ol>
<li>value classes &amp;</li>
<li>collection classes</li>
</ol>


<p>Examples of value objects:</p>

<ul>
<li>NSString</li>
<li>NSNumber</li>
</ul>


<h2>NSString</h2>

<p>This is an object wrapper for string.</p>

<p>Examples:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *myString = @"Hello World";</span></code></pre></td></tr></table></div></figure>


<p>The <code>@</code> symbol is necessary when assigning a literal string to an NSString object.</p>

<h2>NSNumber</h2>

<p>Similarly to <code>NSString</code>, you can prefix a number literal with the symbol <code>@</code> in order to create an <code>NSNumber</code> instance.</p>

<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSNumber *myAge = @44;</span></code></pre></td></tr></table></div></figure>


<h2>Collection Objects</h2>

<p>The most important collection objects of the Foundation framework are:</p>

<ol>
<li><code>NSArray</code> (and its mutable counterpart <code>NSMutableArray</code>)</li>
<li><code>NSSet</code> (and its mutable counterpart <code>NSMutableSet</code>)</li>
<li><code>NSDictionary</code> (and its mutable counterpart <code>NSMutableDictionary</code>)</li>
</ol>


<h2>Define Custom Classes</h2>

<p>You declare the interface in a <code>.h</code> file and the implementation in a <code>.m</code> file.</p>

<p>Example:</p>

<pre><code>@interface ToDoItem : NSObject

@end
</code></pre>

<p>is the <code>ToDoItem.h</code> file.</p>

<p>and the</p>

<pre><code>@implementation ToDoItem

@end
</code></pre>

<p>is the <code>ToDoItem.m</code> file.</p>

<h2>Use Properties to Store Object&rsquo;s Data</h2>

<p>The properties are defined inside the interface part of the class definition. Example:</p>

<pre><code>@interface ToDoItem : NSObject

@property NSString *itemName;
@property BOOL completed;

@end
</code></pre>

<p>And you can declare a property to be readonly as follows:</p>

<pre><code>@property (readonly) NSDate *completionDate;
</code></pre>

<h2>Instance VS Class Methods</h2>

<p>The instance methods are defined using the <code>-</code> sign whereas the
class methods are defined using the <code>+</code> sign.</p>

<p>Example:</p>

<pre><code>@interface Person : NSObject

-(void) speak;
+(void) clean_data;

@end
</code></pre>

<p>In the above example the <code>speak</code> is an instance method, whereas <code>clean_data</code> is a class method.</p>

<h2>Models</h2>

<p>Define your models using custom classes, deriving, for example, from <code>NSObject</code>.</p>

<h2>Private Properties</h2>

<p>You can declare properties in the interface definition of your class but in the <code>.m</code> file. In that case,
the property becomes private, and it is only accessible in the implementation.</p>

<p>Example:</p>

<pre><code>@interface Person : NSObject
@end

@implementation Person

// +age+ is a private property
@property NSNumber *age;

@end
</code></pre>

<h2>Let a View display Dynamic Data</h2>

<p>It needs a <em>data source</em> and a <em>delegate</em>.</p>

<h2>Prototype Cells</h2>

<p>Take their data from the data source of the table view.</p>

<h1>Where do I go from here</h1>

<p>I definitely need to improve my Objective-C knowledge. I will <a href="https://www.codeschool.com/courses/try-objective-c">Try Objective-C</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Params Does the Job]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2015/08/08/rails-params-does-the-job/"/>
    <updated>2015-08-08T10:07:00+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2015/08/08/rails-params-does-the-job</id>
    <content type="html"><![CDATA[<p>When you have a Ruby on Rails end point, the client usually sends data in one of the following:</p>

<ol>
<li>For <code>GET</code> requests, URL encoded in the URI</li>
<li>For <code>POST</code> requests, in the body of the request encoded with <code>application/x-www-form-urlencoded</code> or <code>application/json</code> or other popular format.</li>
</ol>


<p>Sometimes, there is a combination of the above methods. In other words, in a <code>POST</code> request, some of the data may come both URL encoded in the URI and other data may come encoded with
another method in the body of the request.</p>

<!-- more -->


<h2>How do we get the data inside our Rails controller?</h2>

<p>Rails does a very good job and allows us to have access to the data sent by the client in a very easy way. This is called <code>params</code> hash.
The <code>params</code> hash holds the data in a <code>Hash</code> version no matter how the data have been sent by the client. You will find in the <code>params</code> hash
data that have been sent URL encoded on the URI of the request, or <code>application/x-www-form-urlencoded</code> in the body of the request or with
any other method.</p>

<h2>Echo Data Service</h2>

<p>I have very quickly created an echo data service and I have deployed that here:</p>

<p><a href="https://echo-data.herokuapp.com/">https://echo-data.herokuapp.com/</a></p>

<p>The source code of that is here:</p>

<p><a href="https://github.com/pmatsinopoulos/echo">https://github.com/pmatsinopoulos/echo</a></p>

<p>What does it do? It returns back to client the data that the client sends to server. The response is a JSON object with two properties. The <code>params</code> value and the <code>request.body</code> value.
The <code>params</code> value will show to you how the controller has interpreted the data sent by the client. The <code>request.body</code> will show you how the body has been actually received.</p>

<h2>Testing the service</h2>

<p>You can use some <code>curl</code> commands to test the echo data service. Here is how:</p>

<h3>Send data URL encoded as part of the URI</h3>

<p>This example sends the data URL encoded as part of the URI.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl "https://echo-data.herokuapp.com/echo?foo=bar" -v --header "Accept: application/json"</span></code></pre></td></tr></table></div></figure>


<p>As you see in the output of the <code>curl</code> that is given below, this is a <code>GET</code> request and the <code>Content-Type</code> header is not
specified, because the data are part of the URI.</p>

<pre><code>* Hostname was NOT found in DNS cache
*   Trying 54.243.224.121...
* Connected to echo-data.herokuapp.com (54.243.224.121) port 443 (#0)
&gt; GET /echo?foo=bar HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: echo-data.herokuapp.com
&gt; Accept: application/json
&gt; 
&lt; HTTP/1.1 200 OK 
&lt; Connection: keep-alive
&lt; X-Frame-Options: SAMEORIGIN
&lt; X-Xss-Protection: 1; mode=block
&lt; X-Content-Type-Options: nosniff
&lt; Content-Type: application/json; charset=utf-8
&lt; Etag: W/"d83be65a785d7935d5b38bfcb091f75f"
&lt; Cache-Control: max-age=0, private, must-revalidate
&lt; X-Request-Id: 6e888864-0e1a-4f34-8f24-8c2d57f962f3
&lt; X-Runtime: 0.006788
* Server WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13) is not blacklisted
&lt; Server: WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13)
&lt; Date: Sat, 08 Aug 2015 09:11:42 GMT
&lt; Content-Length: 82
&lt; Via: 1.1 vegur
&lt; 
* Connection #0 to host echo-data.herokuapp.com left intact
{"params":{"foo":"bar","controller":"echo","action":"echo"},"request":{"body":""}}
</code></pre>

<p>The last line above is the actual response payload returned from the echo data service. As you can see,
the <code>params</code> hash contains the key <code>foo</code> with value <code>bar</code>. Note that <code>request.body</code> is empty, because we
didn&rsquo;t send anything there.</p>

<h3>Send data URL encoded in the request body</h3>

<p>With this example we will send the data using a <code>POST</code> request and the data will be
url encoded in the request body.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl "https://echo-data.herokuapp.com/echo" -v --data foo=bar --header "Accept: application/json"</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>As you can see from the <code>curl</code> output below, the request is a <code>POST</code> request and the <code>Content-Type</code>
is automatically set to <code>application/x-www-form-urlencoded</code>.</p>

<pre><code>* Hostname was NOT found in DNS cache
*   Trying 23.21.247.21...
* Connected to echo-data.herokuapp.com (23.21.247.21) port 443 (#0)
&gt; POST /echo HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: echo-data.herokuapp.com
&gt; Accept: application/json
&gt; Content-Length: 7
&gt; Content-Type: application/x-www-form-urlencoded
&gt; 
* upload completely sent off: 7 out of 7 bytes
&lt; HTTP/1.1 200 OK 
&lt; Connection: keep-alive
&lt; X-Frame-Options: SAMEORIGIN
&lt; X-Xss-Protection: 1; mode=block
&lt; X-Content-Type-Options: nosniff
&lt; Content-Type: application/json; charset=utf-8
&lt; Etag: W/"92bb929068a54703e29e59154e7c228f"
&lt; Cache-Control: max-age=0, private, must-revalidate
&lt; X-Request-Id: f0262992-5542-4dc3-a2d6-ab52555d3fbe
&lt; X-Runtime: 0.004037
* Server WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13) is not blacklisted
&lt; Server: WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13)
&lt; Date: Sat, 08 Aug 2015 09:12:58 GMT
&lt; Content-Length: 89
&lt; Set-Cookie: request_method=POST; path=/
&lt; Via: 1.1 vegur
&lt; 
* Connection #0 to host echo-data.herokuapp.com left intact
{"params":{"foo":"bar","controller":"echo","action":"echo"},"request":{"body":"foo=bar"}}
</code></pre>

<p>The last line above, is the actual payload response content. It demonstrates that the <code>params</code> hash
has successfully identified the data sent and that you can use it to retrieve it for further processing
in your controller. See how the <code>request.body</code> now is not empty, since <code>curl</code> sent the data in the
body of the request.</p>

<h3>Send data as a JSON string inside the request body</h3>

<p>In the following example we are sending the data as a JSON string in the body of the request:</p>

<pre><code class="`"> curl "https://echo-data.herokuapp.com/echo" -v --header "Accept: application/json" --header "Content-Type: application/json" -d "{\"foo\":\"data\"}"
</code></pre>

<p> What <code>curl</code> returns back is:</p>

<pre><code>* Hostname was NOT found in DNS cache
*   Trying 54.225.207.60...
* Connected to echo-data.herokuapp.com (54.225.207.60) port 443 (#0)
&gt; POST /echo HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: echo-data.herokuapp.com
&gt; Accept: application/json
&gt; Content-Type: application/json
&gt; Content-Length: 14
&gt; 
* upload completely sent off: 14 out of 14 bytes
&lt; HTTP/1.1 200 OK 
&lt; Connection: keep-alive
&lt; X-Frame-Options: SAMEORIGIN
&lt; X-Xss-Protection: 1; mode=block
&lt; X-Content-Type-Options: nosniff
&lt; Content-Type: application/json; charset=utf-8
&lt; Etag: W/"27ba5f1877a65ff394f1899ac75f3449"
&lt; Cache-Control: max-age=0, private, must-revalidate
&lt; X-Request-Id: ecdd54eb-7d99-45b2-9872-cca20a63394c
&lt; X-Runtime: 0.007516
* Server WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13) is not blacklisted
&lt; Server: WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13)
&lt; Date: Sat, 08 Aug 2015 09:17:32 GMT
&lt; Content-Length: 123
&lt; Set-Cookie: request_method=POST; path=/
&lt; Via: 1.1 vegur
&lt; 
* Connection #0 to host echo-data.herokuapp.com left intact
{"params":{"foo":"data","controller":"echo","action":"echo","echo":{"foo":"data"}},"request":{"body":"{\"foo\":\"data\"}"}} 
</code></pre>

<p>As you can see from the <code>curl</code> output, the request is a <code>POST</code> request. The last line shows that, even in that case,
the <code>params</code> hash holds the data in a way that we can handle it from our controller code. See also how the <code>request.body</code>
bears the JSON string sent over.</p>

<h3>Combine data on URI and data in request body</h3>

<p>In the following example, we combine the data on URI and data in request body:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl "https://echo-data.herokuapp.com/echo?hello=world" -v --header "Accept: application/json" --header "Content-Type: application/json" -d "{\"foo\":\"data\"}"</span></code></pre></td></tr></table></div></figure>


<p>The <code>curl</code> output in that case is:</p>

<pre><code>* Hostname was NOT found in DNS cache
*   Trying 54.243.163.2...
* Connected to echo-data.herokuapp.com (54.243.163.2) port 443 (#0)    
&gt; POST /echo?hello=world HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: echo-data.herokuapp.com
&gt; Accept: application/json
&gt; Content-Type: application/json
&gt; Content-Length: 14
&gt; 
* upload completely sent off: 14 out of 14 bytes
&lt; HTTP/1.1 200 OK 
&lt; Connection: keep-alive
&lt; X-Frame-Options: SAMEORIGIN
&lt; X-Xss-Protection: 1; mode=block
&lt; X-Content-Type-Options: nosniff
&lt; Content-Type: application/json; charset=utf-8
&lt; Etag: W/"47484987479c63ee1f544f7c94886d5d"
&lt; Cache-Control: max-age=0, private, must-revalidate
&lt; X-Request-Id: 5c6d5d7c-8289-45d7-8fb4-d0909e19898d
&lt; X-Runtime: 0.055496
* Server WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13) is not blacklisted
&lt; Server: WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13)
&lt; Date: Sat, 08 Aug 2015 09:23:59 GMT
&lt; Content-Length: 139
&lt; Set-Cookie: request_method=POST; path=/
&lt; Via: 1.1 vegur
&lt; 
* Connection #0 to host echo-data.herokuapp.com left intact
{"params":{"foo":"data","hello":"world","controller":"echo","action":"echo","echo":{"foo":"data"}},"request":{"body":"{\"foo\":\"data\"}"}}
</code></pre>

<p>As you can see from the last line, the data in the URI, <code>hello=world</code> have been put in the <code>params</code>. Same goes for data in the request body.</p>

<h2>Summary</h2>

<p>The above article and corresponding examples and code try to show to you how the <code>params</code> hash is the single place to go if you want
to process the data that a client program is sending to your Ruby on Rails end point.</p>

<p>Thanks for reading so far and your comments are always more than welcome.</p>
]]></content>
  </entry>
  
</feed>
