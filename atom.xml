<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Panos Matsinopoulos]]></title>
  <link href="http://pmatsinopoulos.github.io/atom.xml" rel="self"/>
  <link href="http://pmatsinopoulos.github.io/"/>
  <updated>2021-06-12T18:39:35+03:00</updated>
  <id>http://pmatsinopoulos.github.io/</id>
  <author>
    <name><![CDATA[Panos Matsinopoulos]]></name>
    <email><![CDATA[panayotis@matsinopoulos.gr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Converting Any Audio Format to LPCM]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/06/12/converting-any-audio-format-to-lpcm/"/>
    <updated>2021-06-12T18:38:14+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/06/12/converting-any-audio-format-to-lpcm</id>
    <content type="html"><![CDATA[<p>Read my new article on how to <a href="https://medium.com/programming-for-music/converting-any-audio-format-to-lpcm-5077dc533126">Convert Any Audio Format to LPCM</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing Back With Audio Queues]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/05/02/playing-back-with-audio-queues/"/>
    <updated>2021-05-02T08:58:08+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/05/02/playing-back-with-audio-queues</id>
    <content type="html"><![CDATA[<p>Read my new article on how to <a href="https://medium.com/programming-for-music/playing-back-with-audio-queues-c8e9137bc850">Play Back With Audio Queues</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recording With Audio Queues]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/04/16/recording-with-audio-queues/"/>
    <updated>2021-04-16T09:00:42+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/04/16/recording-with-audio-queues</id>
    <content type="html"><![CDATA[<p>Read my new article on how to <a href="https://medium.com/programming-for-music/recording-with-audio-queues-cf41d274c9ea">Record With Audio Queues</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Audio Stream Basic Descriptions]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/04/06/audio-stream-basic-descriptions/"/>
    <updated>2021-04-06T08:50:32+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/04/06/audio-stream-basic-descriptions</id>
    <content type="html"><![CDATA[<p>Read my new article on <a href="https://medium.com/programming-for-music/audio-stream-basic-descriptions-e83484c2b53f">Audio Stream Basic Descriptions</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Raw Audio Samples]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/03/28/generating-raw-audio-samples/"/>
    <updated>2021-03-28T09:54:59+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/03/28/generating-raw-audio-samples</id>
    <content type="html"><![CDATA[<p>Read my new article on how to <a href="https://medium.com/programming-for-music/generating-raw-audio-samples-f08f3adf73af">Generate Raw Audio Samples</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Basic Info From a Local Audio File]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/03/18/reading-basic-info-from-a-local-audio-file/"/>
    <updated>2021-03-18T10:38:15+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/03/18/reading-basic-info-from-a-local-audio-file</id>
    <content type="html"><![CDATA[<p>Read my new article on how to <a href="https://medium.com/programming-for-music/reading-basic-info-from-a-local-audio-file-32206afe1386">Reading Basic Info From a Local Audio File</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Input Notes to MuseScore With VMPK]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/03/16/input-notes-to-musescore-with-vmpk/"/>
    <updated>2021-03-16T10:12:26+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/03/16/input-notes-to-musescore-with-vmpk</id>
    <content type="html"><![CDATA[<p>My new blog post in &ldquo;Programming for Music&rdquo; publication: <a href="https://medium.com/programming-for-music/input-notes-to-musescore-with-vmpk-aa04e8774b0f">Input Notes to MuseScore with VMPK</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Event-Driven Architecture Demo]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/03/07/event-driven-architecture-demo/"/>
    <updated>2021-03-07T13:00:23+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/03/07/event-driven-architecture-demo</id>
    <content type="html"><![CDATA[<p>Read my new article about an <a href="https://panosm.medium.com/event-driven-architecture-demo-29f5649144b7">event-driven architecture demo</a> that I have built.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby and Trusting Young People]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/02/19/ruby-and-trusting-young-people/"/>
    <updated>2021-02-19T08:25:32+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/02/19/ruby-and-trusting-young-people</id>
    <content type="html"><![CDATA[<p>Read my new article on how to <a href="https://panosm.medium.com/ruby-and-trusting-young-people-a18b6394f808">Ruby and Trusting Young People</a> changed my life for better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Exception Hierarchy Best Practices]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2021/02/18/custom-exception-hierarchy-best-practices/"/>
    <updated>2021-02-18T14:32:25+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2021/02/18/custom-exception-hierarchy-best-practices</id>
    <content type="html"><![CDATA[<p>Read my new article on <a href="https://getlavanda.com/engineering/2021-02-18-custom-exception-hierarchy-best-practices">Custom Exception Hierarchy Best Practices</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hanami vs Ruby on Rails]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2020/11/21/hanami-vs-ruby-on-rails/"/>
    <updated>2020-11-21T10:21:08+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2020/11/21/hanami-vs-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>Read my new article: <a href="https://getlavanda.com/engineering/2020-10-30-hanami-vs-ruby-on-rails">Hanami vs Ruby on Rails</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Objective-C Application]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2020/11/21/my-first-objective-c-application/"/>
    <updated>2020-11-21T10:19:22+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2020/11/21/my-first-objective-c-application</id>
    <content type="html"><![CDATA[<p>Read my new article on how to create a simple Objective-C application: <a href="https://panosm.medium.com/my-first-objective-c-application-fbfc215b57f0">My First Objective-C Application</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Embedded Ruby as a Template Language]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2020/07/05/use-embedded-ruby-as-a-template-language/"/>
    <updated>2020-07-05T19:00:12+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2020/07/05/use-embedded-ruby-as-a-template-language</id>
    <content type="html"><![CDATA[<p>Read my new article on how to <a href="https://levelup.gitconnected.com/use-embedded-ruby-as-a-template-language-85a85202f26f">Use Embedded Ruby as a Template Language</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying a Zookeeper Ensemble on AWS]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2019/05/25/deploying-a-zookeeper-ensemble-on-aws/"/>
    <updated>2019-05-25T19:35:09+03:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2019/05/25/deploying-a-zookeeper-ensemble-on-aws</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Tech Career Booster - Zookeeper Ensemble Deployment on AWS</h2>

<p>This is a new blog post in Tech Career Booster blog. It has to do with deploying Zookeeper on AWS.
<a href="https://www.techcareerbooster.com/blog/deploying-a-zookeeper-ensemble-on-aws">Click here to visit it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Your Own Schema Registry Server Using Python and Django]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2019/03/12/build-your-own-schema-registry-server-using-python-and-django/"/>
    <updated>2019-03-12T22:55:57+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2019/03/12/build-your-own-schema-registry-server-using-python-and-django</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Tech Career Booster</h2>

<p>This is a new blog post in Tech Career Booster blog. It has to do with implementing a JSON Validator and Schema Registry
server using Python and Django.
<a href="https://www.techcareerbooster.com/blog/build-your-own-schema-registry-server-using-python-and-django">Click here to visit it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scraping a Web Page or Writing Automated System Tests Using Ruby]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2018/03/04/scraping-a-web-page-or-writing-automated-system-tests-using-ruby/"/>
    <updated>2018-03-04T09:33:36+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2018/03/04/scraping-a-web-page-or-writing-automated-system-tests-using-ruby</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Tech Career Booster</h2>

<p>Scraping a Web page or writing automated system tests is a very popular and much-needed skill in Web development. <a href="https://www.techcareerbooster.com/blog/scraping-a-web-page-or-writing-automated-system-tests-using-ruby?utm_source=pmatsinopoulos_blog&amp;utm_medium=new_blog_post&amp;utm_campaign=blog_post_scraping_automated_tests">Read my new blog post here</a>
in doing that using Ruby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Have the Values, Have the Guts]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2018/01/27/have-the-values-have-the-guts/"/>
    <updated>2018-01-27T07:40:21+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2018/01/27/have-the-values-have-the-guts</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Codementor</h2>

<p>This is my new blog post in Codementor. I am talking about the values you need to develop in order to start being
confident with your customers. <a href="https://www.codementor.io/panosmatsinopoulos/have-the-values-have-the-guts-fwixxfk02">Click here to read it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functions as Arguments and Return Values - JavaScript vs Ruby]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2018/01/20/functions-as-arguments-and-return-values-javascript-vs-ruby/"/>
    <updated>2018-01-20T06:54:06+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2018/01/20/functions-as-arguments-and-return-values-javascript-vs-ruby</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Tech Career Booster</h2>

<p>This is a new blog post in Tech Career Booster. I am explaining how one can use functions as arguments and return values in
two very popular programming languages, JavaScript and Ruby.
<a href="https://www.techcareerbooster.com/blog/functions-as-arguments-and-return-values-javascript-vs-ruby?utm_source=pmatsinopoulos_blog&amp;utm_medium=new_blog_post&amp;utm_campaign=blog_post_function_arguments">Click here to visit it</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use ActiveRecord in Your Ruby Application]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2017/12/09/use-activerecord-in-your-ruby-application/"/>
    <updated>2017-12-09T09:17:00+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2017/12/09/use-activerecord-in-your-ruby-application</id>
    <content type="html"><![CDATA[<h2>My New Blog Post in Tech Career Booster</h2>

<p>This is a new blog post in Tech Career Booster blog. It has to do with using ActiveRecord in a Ruby application.
<a href="https://www.techcareerbooster.com/blog/use-activerecord-in-your-ruby-project?utm_source=pmatsinopoulos_blog&amp;utm_medium=new_blog_post&amp;utm_campaign=blog_post_use_active_record">Click here to visit it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Rails Logger Use One Log File Per Process With Phusion Passenger]]></title>
    <link href="http://pmatsinopoulos.github.io/blog/2016/02/19/making-rails-logger-use-one-log-file-per-process-with-phusion-passenger/"/>
    <updated>2016-02-19T16:57:00+02:00</updated>
    <id>http://pmatsinopoulos.github.io/blog/2016/02/19/making-rails-logger-use-one-log-file-per-process-with-phusion-passenger</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Today, I had to find a way to make my production Rails application log into different log files per process. I have
the application deployed using <a href="https://www.phusionpassenger.com/">Phusion Passenger</a> as an Apache 2 module. The reason
I decided to do that was the fact that I wanted to analyze the logs with <a href="https://github.com/wvanbergen/request-log-analyzer">Request Log Analyzer</a> tool.
This tool requires the log files to be separate so that they do not interleave the log entries of different requests.</p>

<!-- more -->


<h2>Blog Sponsor</h2>

<p>This post is sponsored by <a href="http://www.fraudpointer.com/">Fraudpointer</a>.</p>

<h2>References</h2>

<p>In order to solve that I was helped by what I found about the similar problem solved for Unicorn processes here:</p>

<p><a href="http://jordan.broughs.net/archives/2014/09/provide-separate-rails-log-files-for-each-unicorn-worker">A blog about how one can have different log file per Unicorn worker</a></p>

<p>Then, I had to google about how I could hook to after fork events on Phusion Passenger. There was a very good <a href="http://stackoverflow.com/q/24180809/658469">question here</a>
and its <a href="http://stackoverflow.com/a/24188716/658469">answer here</a>. The answer directed me also on Phusion Passenger documentation for
<a href="https://www.phusionpassenger.com/library/indepth/ruby/spawn_methods/#smart-spawning-hooks">hooking on spawning events</a>.</p>

<h2>Implementation</h2>

<p>I have created an initializer with the following content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">production?</span> <span class="o">&amp;&amp;</span> <span class="n">defined?</span><span class="p">(</span><span class="no">PhusionPassenger</span><span class="p">)</span>
</span><span class='line'>    <span class="no">PhusionPassenger</span><span class="o">.</span><span class="n">on_event</span><span class="p">(</span><span class="ss">:starting_worker_process</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">forked</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># get access to log device</span>
</span><span class='line'>      <span class="k">if</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:VERSION</span><span class="o">::</span><span class="no">STRING</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;4.&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">logdev</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@logdev</span><span class="p">)</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:VERSION</span><span class="o">::</span><span class="no">STRING</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;3.2&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">logdev</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@logger</span><span class="p">)</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@log</span><span class="p">)</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@logdev</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># logdev.dev is a File instance that is the open file to log file.</span>
</span><span class='line'>      <span class="c1"># Get the extension and prepend the process id.</span>
</span><span class='line'>      <span class="n">ext</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">logdev</span><span class="o">.</span><span class="n">dev</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">pid</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">pid</span>
</span><span class='line'>      <span class="n">path</span> <span class="o">=</span> <span class="n">logdev</span><span class="o">.</span><span class="n">dev</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">gsub</span> <span class="sr">/</span><span class="si">#{</span><span class="no">Regexp</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">ext</span><span class="p">)</span><span class="si">}</span><span class="sr">$/</span><span class="p">,</span> <span class="s2">&quot;.</span><span class="si">#{</span><span class="n">pid</span><span class="si">}#{</span><span class="n">ext</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># open the new file</span>
</span><span class='line'>      <span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">file</span><span class="o">.</span><span class="n">binmode</span>
</span><span class='line'>      <span class="n">file</span><span class="o">.</span><span class="n">sync</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># We flush and close the current file handle, the one that writes to the single file.</span>
</span><span class='line'>      <span class="n">logdev</span><span class="o">.</span><span class="n">dev</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'>      <span class="n">logdev</span><span class="o">.</span><span class="n">dev</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># We replace the file handle with the new one +file+ that refers to process specific file.</span>
</span><span class='line'>      <span class="n">logdev</span><span class="o">.</span><span class="n">instance_variable_set</span><span class="p">(</span><span class="ss">:@dev</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="n">ex</span><span class="o">.</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="n">ex</span><span class="o">.</span><span class="n">backtrace</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Closing</h2>

<p>This has been implemented for a Rails 3.2 and a Rails 4.2 application.</p>

<p>Any feedback from you would be much appreciated.</p>
]]></content>
  </entry>
  
</feed>
